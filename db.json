{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.ico","path":"images/apple-touch-icon-next.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/dog_16px_1167486_easyicon.net.ico","path":"images/dog_16px_1167486_easyicon.net.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.ico","path":"images/favicon-16x16-next.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.ico","path":"images/favicon-32x32-next.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpeg","path":"images/wechatpay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpeg","path":"images/alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Paxos算法.md","hash":"3dc3ed32d7bd094ee047a34cc93dd3d7361a067d","modified":1536826059874},{"_id":"source/_posts/String之intern函数.md","hash":"3f6c01394551550247a6d110650e66ace2939945","modified":1536827348656},{"_id":"source/_posts/java之char数组输出.md","hash":"2247812976df984b5940d8585da871e3ca7875cb","modified":1536820839408},{"_id":"source/_posts/java值传递和引用传递.md","hash":"874276fef2617faf46047f3c35ff5879e660a043","modified":1536827381173},{"_id":"source/_posts/session共享解决方案.md","hash":"27a999303713ea6ea04d57cd7c692df6bfd820ed","modified":1536826849576},{"_id":"source/_posts/拜占庭容错算法（PBFT）.md","hash":"5dbe5385a13fb12d4e3004051a090df4e2671aed","modified":1536826984506},{"_id":"source/_posts/数据库索引之BTree.md","hash":"c4267df077fef2a87fef7f5a91b044eb2ae756ea","modified":1536824907122},{"_id":"source/_posts/树莓派3B-DHT11-Yeelink云平台（实现温湿度远程监控）.md","hash":"2138d8c8e422e3621508081d0349e08775f09578","modified":1536820839410},{"_id":"source/_posts/自定义线程池（一）.md","hash":"f25f543949ae0dec564a2f133b943973a0338e23","modified":1536826746343},{"_id":"source/_posts/自定义线程池（二）.md","hash":"9f4b83db94f6573737af7149502a1f5a1b8b5b51","modified":1536826524566},{"_id":"source/about/index.md","hash":"dc707f80eb22e7a3cfa83fd270908ca65ee66509","modified":1536820839410},{"_id":"source/categories/index.md","hash":"333642d6cdd0521513e3e541d29f0c673d8f24fc","modified":1536820839411},{"_id":"source/tags/index.md","hash":"42cf4a90c4aca53d6bd860277f1801b4690567be","modified":1536820839412},{"_id":"themes/next/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589668000},{"_id":"source/_posts/Paxos算法/1.png","hash":"b753283803203afe0ee85ce5c62e8a0f3d29773e","modified":1536825028749},{"_id":"source/_posts/Paxos算法/2.png","hash":"5bc8d96ad8db2b3304da97439b3702f0bb310ab3","modified":1536826030125},{"_id":"source/_posts/String之intern函数/1.png","hash":"81fcba8a029eb30d8a91aaf6a1f7f15ae4266fda","modified":1536820839405},{"_id":"source/_posts/String之intern函数/3.png","hash":"0443bb2f012a6ba5d0ec738a6e3321529d7e5924","modified":1536820839407},{"_id":"source/_posts/String之intern函数/2.png","hash":"a054a8611f25598bcef3ffaaf30315f673412317","modified":1536820839406},{"_id":"source/_posts/java值传递和引用传递/1.png","hash":"01d359452c1dcdb16add98e71865a53341facb24","modified":1536820839409},{"_id":"source/_posts/数据库索引之BTree/1.png","hash":"b0795b02f176b34b92dcbcb539cc1a73575d95a1","modified":1536824720591},{"_id":"source/_posts/数据库索引之BTree/2.png","hash":"1ec8a05d2fbbcfe8336b9a2c6f9a4a0e433cdd10","modified":1536824730386},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1516589670000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1516589670000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1516589672000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1516589672000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1516589670000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1516589672000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1516589672000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1516589672000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1516589670000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1516589674000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1516589674000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1516589674000},{"_id":"themes/next/_config.yml","hash":"6778666769d7df17deabf70199673a9276eacd7f","modified":1516589672000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1516589670000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1516589672000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1516589670000},{"_id":"source/_posts/数据库索引之BTree/3.png","hash":"02a5518095c7399f0449b3104b5afa997868c4d3","modified":1536824725710},{"_id":"themes/next/test/debug.log","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589776000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1516589768000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1516589768000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1516589768000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1516589768000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1516589674000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1516589676000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1516589768000},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1516589768000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1516589770000},{"_id":"themes/next/.git/index","hash":"f7065f49c219077ed01ebb51c48026a6ebed1a37","modified":1516589768000},{"_id":"themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1516589770000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1516589776000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1516589776000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1516589776000},{"_id":"themes/next/source/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1516589680000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1516589680000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1516589680000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1516589676000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1516589678000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1516589678000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1516589678000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1516589678000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1516589676000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1516589676000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1516589770000},{"_id":"themes/next/.git/logs/HEAD","hash":"aa8236c336df62836f3b76b5489c77289779a4a6","modified":1516589772000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589746000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1516589746000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1516589746000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1516589750000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1516589748000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1516589746000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1516589748000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1516589750000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1516589746000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1516589746000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1516589748000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1516589750000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1516589750000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1516589750000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1516589748000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1516589748000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1516589746000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1516589752000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1516589750000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1516589750000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1516589750000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1516589750000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1516589750000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1516589750000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1516589752000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1516589772000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1516589770000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1516589770000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1516589770000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1516589770000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1516589770000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1516589770000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1516589772000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1516589770000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1516589680000},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1516589770000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1516589738000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516589736000},{"_id":"themes/next/source/images/apple-touch-icon-next.ico","hash":"3e5bb711ac1719a47a1679ac286e463916e8b1ab","modified":1516589740000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1516589740000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1516589738000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1516589742000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1516589742000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1516589738000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1516589740000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1516589742000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1516589740000},{"_id":"themes/next/source/images/dog_16px_1167486_easyicon.net.ico","hash":"7c041f776480057c8735c03d845d609238c30bfe","modified":1516589740000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1516589734000},{"_id":"themes/next/source/images/favicon-16x16-next.ico","hash":"7c041f776480057c8735c03d845d609238c30bfe","modified":1516589736000},{"_id":"themes/next/source/images/favicon-32x32-next.ico","hash":"7e01451ae272548834ed869964dd5ffb0f7e7f19","modified":1516589742000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1516589736000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516589740000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1516589738000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516589742000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1516589734000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1516589742000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516589742000},{"_id":"themes/next/source/images/wechatpay.jpeg","hash":"49feba1e1f45ace639a46468867cea51d9424b58","modified":1516589736000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1516589764000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1516589764000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1516589764000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1516589762000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589708000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589708000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589708000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589708000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1516589764000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1516589762000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589706000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1516589764000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1516589744000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1516589744000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1516589744000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1516589744000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1516589744000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1516589744000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1516589744000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1516589744000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1516589744000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1516589744000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1516589744000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516589752000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1516589752000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1516589754000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1516589754000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1516589754000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1516589754000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1516589754000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1516589754000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1516589752000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1516589752000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1516589752000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1516589756000},{"_id":"themes/next/source/images/alipay.jpeg","hash":"c699a96f75be6f1a48e9924cd459dc8cfddd1b36","modified":1516589742000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1516589754000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1516589756000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1516589756000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1516589754000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1516589756000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1516589756000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"aa8236c336df62836f3b76b5489c77289779a4a6","modified":1516589772000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1516589682000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1516589708000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1516589708000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1516589708000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1516589708000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1516589706000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1516589706000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1516589706000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1516589770000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1516589724000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1516589720000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1516589734000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1516589720000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1516589720000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1516589724000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1516589724000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1516589724000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1516589724000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1516589724000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1516589724000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1516589724000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1516589724000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1516589728000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1516589722000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1516589728000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1516589726000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1516589708000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1516589708000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1516589708000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1516589708000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1516589708000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1516589708000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1516589708000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1516589708000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1516589708000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589752000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1516589752000},{"_id":"themes/next/source/images/background.jpg","hash":"209c08cc20da8096c18d54ee667354f6c37a107f","modified":1516589740000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1516589724000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1516589732000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1516589734000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1516589732000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1516589726000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1516589726000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1516589726000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1516589726000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1516589726000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1516589766000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1516589766000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1516589746000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1516589764000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1516589764000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1516589764000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1516589766000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1516589766000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1516589766000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1516589768000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516589752000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1516589752000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1516589760000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1516589760000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1516589758000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1516589758000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1516589760000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1516589760000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1516589762000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1516589760000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1516589762000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1516589760000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1516589760000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1516589762000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1516589760000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1516589752000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1516589756000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1516589756000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1516589756000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1516589726000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"aa8236c336df62836f3b76b5489c77289779a4a6","modified":1516589772000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1516589760000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1516589684000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1516589682000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1516589682000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1516589684000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1516589684000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1516589682000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1516589684000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1516589702000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1516589702000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1516589702000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1516589702000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1516589702000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1516589702000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1516589702000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1516589706000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b75fe5c951b6e591a919667a7a087d3633e43af0","modified":1516589706000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1516589706000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1516589706000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"62ac1e720d11d99f918fc0fd74b5bf22c257895a","modified":1516690636000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516589706000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"e98a78306125273fcfc3b642dd84c38967bd8697","modified":1516690106000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1516589706000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1516589704000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1516589704000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1516589722000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1516589732000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1516589730000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1516589730000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516589708000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1516589708000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1516589710000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516589710000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1516589710000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1516589724000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1516589724000},{"_id":"themes/next/.git/objects/pack/pack-43ca19f05a7eafaedc751ec6ae895cd343f93cae.idx","hash":"c637758f1196f2aeae22bf87c40dee268b82109e","modified":1516589776000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1516589730000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1516589756000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1516589756000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516589710000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516589718000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"26fed001c3c49554f39f3bac9d4bdb13c9a98d82","modified":1516589696000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"10accb7aabdc23f122e7448191a103baae18dc69","modified":1516589696000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1516589696000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1516589698000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1516589698000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1516589698000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1516589698000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1516589698000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1516589686000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1516589688000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1516589686000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1516589688000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1516589686000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1516589702000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1516589686000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1516589688000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1516589690000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1516589692000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1516589688000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1516589690000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1516589688000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1516589690000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1516589690000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1516589692000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1516589692000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1516589698000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1516589698000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1516589700000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1516589694000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1516589694000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1516589694000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1516589694000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1516589694000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1516589694000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1516589696000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1516589696000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1516589692000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1516589694000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516589706000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1516589706000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1516589728000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1516589704000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1516589722000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1516589722000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1516589732000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1516589732000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1516589730000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1516589732000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1516589732000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516589712000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516589714000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516589716000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1516589720000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1516589738000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516589716000},{"_id":"themes/next/.git/objects/pack/pack-43ca19f05a7eafaedc751ec6ae895cd343f93cae.pack","hash":"886bc64f4f16bf15797490c12a53f33b839e38f5","modified":1516589878000},{"_id":"public/atom.xml","hash":"3977e6a1e6e984808d61fce880867f6c42d5d6ba","modified":1536827410704},{"_id":"public/about/index.html","hash":"8595cde1457384ffcd5669810cba64de62061c47","modified":1536827222295},{"_id":"public/categories/index.html","hash":"b58021c0417bdfb6bea958b16896fb6559b2afc5","modified":1536827222295},{"_id":"public/tags/index.html","hash":"5bb3f9a5201fa81f06717e48420c3ba9c85d595a","modified":1536827222296},{"_id":"public/categories/java基础/index.html","hash":"b0436ed2d107df945d18ee59cd25fc315006f04b","modified":1536827410834},{"_id":"public/categories/嵌入式/index.html","hash":"2dc7ecd2c3121599ad7e68f7a46b1a871f09ed62","modified":1536827222298},{"_id":"public/archives/2015/index.html","hash":"15d0f721f4670ed071021973dfe0030260f71416","modified":1536827222296},{"_id":"public/archives/2015/02/index.html","hash":"f91e28a1760a575150574c9b043ecf670521cbcf","modified":1536827222296},{"_id":"public/archives/2015/07/index.html","hash":"7d6b0c01ea0a9d55c9b2bf67cf0111e42c4639ad","modified":1536827222296},{"_id":"public/archives/2018/01/index.html","hash":"39887032fbc50484b2fd37fcf10ebdc9f62e0aac","modified":1536827410835},{"_id":"public/archives/2018/03/index.html","hash":"0efbcb545a585e47a392b71dccb13ce480960b2f","modified":1536827410835},{"_id":"public/tags/java/index.html","hash":"7477941d2166ee46d6f847f0e7c8ff3ebf5568c5","modified":1536827410835},{"_id":"public/tags/面试/index.html","hash":"44a0a7905adffcea653cf806c1a94b76e437549d","modified":1536827410835},{"_id":"public/tags/基础/index.html","hash":"e4971371035fba42a97f18b3fa92beb463d9c865","modified":1536827410835},{"_id":"public/tags/树莓派/index.html","hash":"28b0319e3a00ea57506d3d8a17049156ddf5f64c","modified":1536827222298},{"_id":"public/tags/温湿度传感器/index.html","hash":"89b39c60bdd7a0782b45787d32eee2d825583ddf","modified":1536827222298},{"_id":"public/2018/03/04/String之intern函数/index.html","hash":"9076bf8c9a05dcadfb7adc175c29094c5d29b07a","modified":1536827222299},{"_id":"public/2018/01/23/java值传递和引用传递/index.html","hash":"0b8de3f7d5db01c5a7d6eede2196766bb2b8fd35","modified":1536827222300},{"_id":"public/2015/07/09/树莓派3B-DHT11-Yeelink云平台（实现温湿度远程监控）/index.html","hash":"5f2bd6bad3cc61185d16c8d8c65098fde6342cf6","modified":1536827410836},{"_id":"public/2015/02/07/java之char数组输出/index.html","hash":"44ed9bdb61d9e03f2831921eb0898da6b8ac4a2e","modified":1536827222300},{"_id":"public/index.html","hash":"62628878150c1bfbf2c07f99c25a19962fcbf08c","modified":1536827410836},{"_id":"public/archives/index.html","hash":"23b57cf458b789bc7a85463db1c87efd0b6186b8","modified":1536827410836},{"_id":"public/archives/2018/index.html","hash":"b3726783e3ce2b0fc2bf31cbe7654ffe81af4d87","modified":1536827410835},{"_id":"public/2018/09/13/拜占庭容错算法（PBFT）/index.html","hash":"f01b7bd7b4419c9fc8adf86c6e237c4357dee275","modified":1536826098548},{"_id":"public/2018/09/13/session共享解决方案/index.html","hash":"90e12be1e4f2984d3d14ca39f0607d3dc8e1a300","modified":1536826098548},{"_id":"public/2018/09/13/自定义线程池（一）/index.html","hash":"107eab02850b2095db11fb65f546c3ca83122e43","modified":1536826098548},{"_id":"public/2018/09/13/自定义线程池（二）/index.html","hash":"7726066f697780b867297a838291b22536ed4465","modified":1536826098549},{"_id":"public/categories/分布式/index.html","hash":"ba9418e912ce5339581c6dd7bce2d1fcb8cf1a62","modified":1536827222297},{"_id":"public/categories/分布式/一致性/index.html","hash":"2949a975877cb7ba10b96f57baf72869e6443b93","modified":1536827222297},{"_id":"public/categories/数据库/index.html","hash":"047e62ad7c057c88586e3dfbcd68d0a66451d7bf","modified":1536827222298},{"_id":"public/archives/2018/09/index.html","hash":"3baf839e0d33534e5538d23f0b15e8a077324dd9","modified":1536827007969},{"_id":"public/tags/一致性/index.html","hash":"b12302bf41ba883270d0c3f54f963c5b90ade47b","modified":1536827222298},{"_id":"public/tags/分布式/index.html","hash":"51742359e80f439935acb234143f030c6b69a4fe","modified":1536827222298},{"_id":"public/tags/算法/index.html","hash":"af4b1767c237545fe569440185de1a7310469f12","modified":1536827222298},{"_id":"public/tags/数据库/index.html","hash":"706978449cc2eadb906ee8b277b0a5c6aa0da07a","modified":1536827222298},{"_id":"public/tags/底层原理/index.html","hash":"f89e8730ef7f35e75c7a936d58317885666321fc","modified":1536827222298},{"_id":"public/tags/数据结构/index.html","hash":"5d385bb0fdc9d3bf6b66fb55fd1904d8b2e8ac82","modified":1536827222298},{"_id":"public/tags/毕业设计/index.html","hash":"f25f6c358ed52ee4e12f34f6a127162d54fe1a70","modified":1536827222299},{"_id":"public/2018/03/29/数据库索引之BTree/index.html","hash":"6a6082fad4c30446699fbaa2cee14f54fcb24aea","modified":1536827410835},{"_id":"public/2018/01/03/Paxos算法/index.html","hash":"80c207144f93ebd821873e08ebc2c2736b6d3f41","modified":1536827410835},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1536826098563},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536826098563},{"_id":"public/images/apple-touch-icon-next.ico","hash":"3e5bb711ac1719a47a1679ac286e463916e8b1ab","modified":1536826098563},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536826098564},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1536826098564},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1536826098564},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1536826098564},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1536826098564},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1536826098564},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1536826098564},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1536826098564},{"_id":"public/images/dog_16px_1167486_easyicon.net.ico","hash":"7c041f776480057c8735c03d845d609238c30bfe","modified":1536826098564},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536826098564},{"_id":"public/images/favicon-16x16-next.ico","hash":"7c041f776480057c8735c03d845d609238c30bfe","modified":1536826098564},{"_id":"public/images/favicon-32x32-next.ico","hash":"7e01451ae272548834ed869964dd5ffb0f7e7f19","modified":1536826098564},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536826098564},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536826098564},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1536826098564},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536826098564},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1536826098564},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1536826098564},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536826098564},{"_id":"public/images/wechatpay.jpeg","hash":"49feba1e1f45ace639a46468867cea51d9424b58","modified":1536826098564},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1536826098564},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1536826098565},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536826098565},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536826098565},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536826098565},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536826098565},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536826098565},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536826098565},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1536826098565},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536826098565},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536826098565},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536826098565},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536826098565},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536826098565},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536826098565},{"_id":"public/2018/03/04/String之intern函数/1.png","hash":"81fcba8a029eb30d8a91aaf6a1f7f15ae4266fda","modified":1536826098565},{"_id":"public/2018/03/04/String之intern函数/2.png","hash":"a054a8611f25598bcef3ffaaf30315f673412317","modified":1536826098565},{"_id":"public/2018/03/04/String之intern函数/3.png","hash":"0443bb2f012a6ba5d0ec738a6e3321529d7e5924","modified":1536826098565},{"_id":"public/2018/01/23/java值传递和引用传递/1.png","hash":"01d359452c1dcdb16add98e71865a53341facb24","modified":1536826098566},{"_id":"public/2018/01/03/Paxos算法/1.png","hash":"b753283803203afe0ee85ce5c62e8a0f3d29773e","modified":1536826098566},{"_id":"public/2018/01/03/Paxos算法/2.png","hash":"5bc8d96ad8db2b3304da97439b3702f0bb310ab3","modified":1536826098566},{"_id":"public/2018/03/29/数据库索引之BTree/1.png","hash":"b0795b02f176b34b92dcbcb539cc1a73575d95a1","modified":1536826098566},{"_id":"public/2018/03/29/数据库索引之BTree/2.png","hash":"1ec8a05d2fbbcfe8336b9a2c6f9a4a0e433cdd10","modified":1536826098566},{"_id":"public/images/alipay.jpeg","hash":"c699a96f75be6f1a48e9924cd459dc8cfddd1b36","modified":1536826099000},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536826099002},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536826099009},{"_id":"public/2018/03/29/数据库索引之BTree/3.png","hash":"02a5518095c7399f0449b3104b5afa997868c4d3","modified":1536826099009},{"_id":"public/404.html","hash":"a5991bb3598c5d934bd97e3bc4ed14b71ebf1e62","modified":1536826099017},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1536826099017},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536826099017},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1536826099017},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1536826099017},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536826099018},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1536826099018},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1536826099018},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536826099018},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1536826099018},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536826099018},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536826099018},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536826099018},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1536826099019},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1536826099019},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536826099019},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1536826099019},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1536826099020},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536826099020},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536826099020},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536826099020},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536826099021},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536826099021},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536826099021},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536826099021},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536826099021},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536826099021},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1536826099021},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1536826099021},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1536826099021},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1536826099021},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1536826099021},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1536826099021},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536826099021},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536826099021},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536826099021},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1536826099022},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1536826099022},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1536826099022},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1536826099022},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1536826099022},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1536826099022},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1536826099022},{"_id":"public/css/main.css","hash":"d1e391271c1e7919979a08a7089ac4a98e8979b6","modified":1536826099022},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1536826099022},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1536826099022},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1536826099022},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1536826099022},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1536826099022},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536826099022},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1536826099023},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536826099023},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1536826099023},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536826099023},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1536826099023},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1536826099023},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1536826099023},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1536826099023},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1536826099023},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536826099023},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1536826099023},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1536826099023},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1536826099023},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1536826099023},{"_id":"public/images/background.jpg","hash":"209c08cc20da8096c18d54ee667354f6c37a107f","modified":1536826099024},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536826099024},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536826099024},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536826099024},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1536826099063},{"_id":"source/_posts/拜占庭容错算法（PBFT）/1.jpg","hash":"17c892bae022e7e751aae60e6c068c9b659e00c1","modified":1536826909010},{"_id":"source/_posts/自定义线程池（一）/1.png","hash":"6dee3b19de689bb2c233b1e0ae26a4c379d6b402","modified":1536826592103},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座.html","hash":"701eadd6c879cfca23a78982d5d0ebaadb2a56e3","modified":1536826597458},{"_id":"source/_posts/拜占庭容错算法（PBFT）/2.png","hash":"6db6e4c2a49241705c9c2bf07c2c80ef06948bf6","modified":1536826913906},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/1.png","hash":"6dee3b19de689bb2c233b1e0ae26a4c379d6b402","modified":1536826597080},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536826596982},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536826597020},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/bootstrap.js.下载","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536826597409},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/fastclick.min.js.下载","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536826597209},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/main.css","hash":"5ef3f86bdcbebbc55a80e17cb605b0a033e4370c","modified":1536826597046},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/jquery.fancybox.pack.js.下载","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536826597303},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/motion.js.下载","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536826597354},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/jquery.lazyload.js.下载","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536826597233},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/post-details.js.下载","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536826597396},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/velocity.min.js.下载","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536826597264},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/wechatpay.jpeg","hash":"49feba1e1f45ace639a46468867cea51d9424b58","modified":1536826597112},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/scrollspy.js.下载","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536826597368},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/velocity.ui.min.js.下载","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536826597287},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/alipay.jpeg","hash":"c699a96f75be6f1a48e9924cd459dc8cfddd1b36","modified":1536826597131},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/utils.js.下载","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536826597330},{"_id":"source/_posts/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/index.js.下载","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536826597177},{"_id":"public/categories/算法/index.html","hash":"3f608544137fb57387ea4ac34c3b87f9cd171b53","modified":1536827222298},{"_id":"public/categories/java高级/index.html","hash":"e616969e78653f54af5581ea74e49f0f06a90415","modified":1536827222298},{"_id":"public/archives/page/2/index.html","hash":"a60f37eea4c34775749a274d98470ac7bad03a5c","modified":1536827007974},{"_id":"public/archives/2017/index.html","hash":"254c0708bf96f0443c4f80195321a835bc549fb9","modified":1536827410835},{"_id":"public/archives/2017/09/index.html","hash":"3867115dec66ccf2a322a6f3248b5ae388742eab","modified":1536827222297},{"_id":"public/archives/2017/10/index.html","hash":"354821bdcee006271f75571789691f4281ada35d","modified":1536827222297},{"_id":"public/archives/2017/12/index.html","hash":"ea02079599d6d2c5c5cdd095ff1eb337dba075fb","modified":1536827410835},{"_id":"public/tags/session共享/index.html","hash":"665f020f56066411207cd179c17e7f0c4d1c8833","modified":1536827222299},{"_id":"public/tags/区块链/index.html","hash":"6e41e96a57a8039781ad59d0b65c82751c4aa744","modified":1536827222299},{"_id":"public/tags/线程池/index.html","hash":"7793bc7166825824604797ead9d91b54f33b67bc","modified":1536827222299},{"_id":"public/tags/多线程/index.html","hash":"285321170f8d8ad19fde09d65b40350baf3a0aa4","modified":1536827222299},{"_id":"public/2018/09/13/自定义线程池（一）/自定义线程池（一） _ 天秤座/index.html","hash":"ef8f173d469ea1fda3c57474a538769ba86d48a7","modified":1536827007975},{"_id":"public/2018/09/13/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/main/index.html","hash":"bf01d620dd65249acbfbd14deb566595639bbd9f","modified":1536827007975},{"_id":"public/2018/09/13/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/font-awesome.min/index.html","hash":"a675cf5998e6e88bdba7310d436a1a2dc2e393db","modified":1536827007975},{"_id":"public/2018/09/13/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/jquery.fancybox/index.html","hash":"4c639986bbeed58c5336424c57ee5a54a3ad2657","modified":1536827007975},{"_id":"public/2017/12/11/自定义线程池（二）/index.html","hash":"61ebab89a6b553052eb575c9e5f95f243041d307","modified":1536827222300},{"_id":"public/2017/12/09/自定义线程池（一）/index.html","hash":"430127665fe0372b00f3c6873eff2caa92b768c1","modified":1536827410836},{"_id":"public/2017/10/09/session共享解决方案/index.html","hash":"7d7084cc221c1888aa72a8e19cc5c5d8223d5658","modified":1536827410836},{"_id":"public/2017/09/09/拜占庭容错算法（PBFT）/index.html","hash":"3a0e8fc2f2b6f40e034f2537b0d73135b24e5e4f","modified":1536827410836},{"_id":"public/page/2/index.html","hash":"9c5bd33a8751fe0cc431b16a6f31bb40d9f03dc6","modified":1536827007975},{"_id":"public/2017/12/09/自定义线程池（一）/1.png","hash":"6dee3b19de689bb2c233b1e0ae26a4c379d6b402","modified":1536827007980},{"_id":"public/2017/09/09/拜占庭容错算法（PBFT）/1.jpg","hash":"17c892bae022e7e751aae60e6c068c9b659e00c1","modified":1536827007980},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/bootstrap.js.下载","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1536827007982},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/1.png","hash":"6dee3b19de689bb2c233b1e0ae26a4c379d6b402","modified":1536827007982},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/motion.js.下载","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1536827007982},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/post-details.js.下载","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1536827007983},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/jquery.fancybox.pack.js.下载","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1536827007983},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/velocity.min.js.下载","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1536827007983},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/wechatpay.jpeg","hash":"49feba1e1f45ace639a46468867cea51d9424b58","modified":1536827007983},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/scrollspy.js.下载","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1536827007984},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/velocity.ui.min.js.下载","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1536827007984},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/utils.js.下载","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1536827007984},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/jquery.lazyload.js.下载","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1536827007984},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/fastclick.min.js.下载","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536827007984},{"_id":"public/2017/09/09/拜占庭容错算法（PBFT）/2.png","hash":"6db6e4c2a49241705c9c2bf07c2c80ef06948bf6","modified":1536827007989},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/alipay.jpeg","hash":"c699a96f75be6f1a48e9924cd459dc8cfddd1b36","modified":1536827007989},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/index.js.下载","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1536827007990},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1536827007997},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座.html","hash":"701eadd6c879cfca23a78982d5d0ebaadb2a56e3","modified":1536827007997},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1536827007997},{"_id":"public/2017/12/09/自定义线程池（一）/自定义线程池（一） _ 天秤座_files/main.css","hash":"5ef3f86bdcbebbc55a80e17cb605b0a033e4370c","modified":1536827007997},{"_id":"public/archives/2017/01/index.html","hash":"bfdf8b966408cb4f4684689db3d6381e402d48fa","modified":1536827410837},{"_id":"public/2017/12/04/String之intern函数/index.html","hash":"842e636a8cbe8db87e5e74f51a768e4e3101a779","modified":1536827410837},{"_id":"public/2017/01/23/java值传递和引用传递/index.html","hash":"63bb21a494abc49ae3d53919840a1173b3251dba","modified":1536827410837},{"_id":"public/2017/12/04/String之intern函数/3.png","hash":"0443bb2f012a6ba5d0ec738a6e3321529d7e5924","modified":1536827410839},{"_id":"public/2017/01/23/java值传递和引用传递/1.png","hash":"01d359452c1dcdb16add98e71865a53341facb24","modified":1536827410839},{"_id":"public/2017/12/04/String之intern函数/2.png","hash":"a054a8611f25598bcef3ffaaf30315f673412317","modified":1536827410839},{"_id":"public/2017/12/04/String之intern函数/1.png","hash":"81fcba8a029eb30d8a91aaf6a1f7f15ae4266fda","modified":1536827410839}],"Category":[{"name":"分布式","_id":"cjm0akt2r00023gvwfbmqfh4g"},{"name":"java基础","_id":"cjm0akt2z00073gvwv7q8cx97"},{"name":"一致性","parent":"cjm0akt2r00023gvwfbmqfh4g","_id":"cjm0akt3a000k3gvwt35dmz37"},{"name":"数据库","_id":"cjm0akt3c000q3gvwd4i054ql"},{"name":"嵌入式","_id":"cjm0akt3c000t3gvw5owmldvw"},{"name":"算法","_id":"cjm0b4abh000124vwc4njdgc6"},{"name":"java高级","_id":"cjm0b4agm000b24vw8gyq2or5"}],"Data":[],"Page":[{"title":"关于","date":"2018-01-19T08:43:33.000Z","_content":"If you missed the train I'm on\nYou will know that I am gone\nYou can hear the whistle blow a hundred miles\nA hundred miles, a hundred miles,\nA hundred miles, a hundred miles\nYou can hear the whistle blow a hundred miles\nLord, I'm one, Lord, I'm two,\nLord, I'm three, Lord, I'm four\nLord, I'm five hundred miles away from home\nAway from home, away from home,\nAway from home, away from home\nLord, I'm five hundred miles away from home\nNot a shirt on my back\nNot a penny to my name\nLord, I can't go back home this ole way\nThis ole way, this ole way,\nThis ole way, this ole way,\nLord, I can't go back home this this ole way\nIf you…\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-01-19 16:43:33\n---\nIf you missed the train I'm on\nYou will know that I am gone\nYou can hear the whistle blow a hundred miles\nA hundred miles, a hundred miles,\nA hundred miles, a hundred miles\nYou can hear the whistle blow a hundred miles\nLord, I'm one, Lord, I'm two,\nLord, I'm three, Lord, I'm four\nLord, I'm five hundred miles away from home\nAway from home, away from home,\nAway from home, away from home\nLord, I'm five hundred miles away from home\nNot a shirt on my back\nNot a penny to my name\nLord, I can't go back home this ole way\nThis ole way, this ole way,\nThis ole way, this ole way,\nLord, I can't go back home this this ole way\nIf you…\n","updated":"2018-09-13T06:40:39.410Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjm0akt3r001m3gvwmd562ycs","content":"<p>If you missed the train I’m on<br>You will know that I am gone<br>You can hear the whistle blow a hundred miles<br>A hundred miles, a hundred miles,<br>A hundred miles, a hundred miles<br>You can hear the whistle blow a hundred miles<br>Lord, I’m one, Lord, I’m two,<br>Lord, I’m three, Lord, I’m four<br>Lord, I’m five hundred miles away from home<br>Away from home, away from home,<br>Away from home, away from home<br>Lord, I’m five hundred miles away from home<br>Not a shirt on my back<br>Not a penny to my name<br>Lord, I can’t go back home this ole way<br>This ole way, this ole way,<br>This ole way, this ole way,<br>Lord, I can’t go back home this this ole way<br>If you…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>If you missed the train I’m on<br>You will know that I am gone<br>You can hear the whistle blow a hundred miles<br>A hundred miles, a hundred miles,<br>A hundred miles, a hundred miles<br>You can hear the whistle blow a hundred miles<br>Lord, I’m one, Lord, I’m two,<br>Lord, I’m three, Lord, I’m four<br>Lord, I’m five hundred miles away from home<br>Away from home, away from home,<br>Away from home, away from home<br>Lord, I’m five hundred miles away from home<br>Not a shirt on my back<br>Not a penny to my name<br>Lord, I can’t go back home this ole way<br>This ole way, this ole way,<br>This ole way, this ole way,<br>Lord, I can’t go back home this this ole way<br>If you…</p>\n"},{"title":"分类","date":"2018-01-19T10:49:15.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \"分类\"\ndate: 2018-01-19 18:49:15\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-13T06:40:39.411Z","path":"categories/index.html","layout":"page","_id":"cjm0akt3s001n3gvwz07wro82","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-19T05:27:09.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-19 13:27:09\ntype: \"tags\"\n---\n","updated":"2018-09-13T06:40:39.412Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjm0akt3t001o3gvww3i3o8ni","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Paxos算法","date":"2018-01-03T07:40:58.000Z","_content":"\n在分布式一致性中Paxos算法是一个非常重要的算法，阿里实现的X-Paxos，腾讯的phxpaxos（开源）\n\n\n\n#### Basic Paxos\n\nPaxos四个角色：\n\n- Client：议题提出者\n- Proposer：提议者\n- Acceptor：投票者\n- Learner：决策者\n\n{% asset_img 1.png Basic Paxos %}\n\n  图中只是显示一个提议的执行过程，步骤是\n\n1. Client（提议发起者）提出一个提议，交给一个Propser\n2. 这个Propser带着一个值（可以理解为id）去告诉所有的Acceptor\n3. Acceptor看看自己的id，发现为空，然后就记录下Propser的id。\n4. Propser第二次带着id和提议去找所有的Acceptor，那些记录的id还是自己的话，Acceptor就接受这个提议，记录下并告诉Learner\n5. 当Learner发现这一协议已经超过半数了，那么就代表通过了，然后把信息返回给Client\n\n从执行过程可以看到，朴素Pexos是一个2-Phase，第一阶段先去告诉Acceptor我的id，第二阶段才让Acceptor去接受协议。\n\n> 多Propser的时候要注意\n>\n> 1. 如果一个Propser携带的id比Acceptor记录的小，那么会被拒绝\n> 2. 如果Propser携带的id大于Acceptor的id，那么就覆盖Acceptor的id\n> 3. 如果Propser到达的Acceptor已经接受了某个协议，那么Propser就会把自己的协议改成Acceptor记录的协议\n\n\n\n#### Multi Paxos\n\nBasic Paxos因为是2-Phase，所以延时很高，而且它最后只确定了一个值。而Multi Paxos正好解决了这两个问题。\n\n{% asset_img 2.png Multi Paxos %}\n\n如图所示，Multi Paxos只有一个阶段，其实在Basic Paxos中第一个阶段只是为了防止多个提议照成的冲突，而真正验证是否一致性的是第二个阶段，当超过一半的都已经接受同一个提议，那么则个协议肯定通过了。\n\n而之所以能去掉第一个阶段是因为只有一个Propser在提议，所以只要保证半数成功即可，因为是一个所以不能并发，而这个Propser的选取有的说是使用Basic Paxos来选举的，其实在Paxos原论文有一种更好的方式，就是Acceptor节点接受到其他节点的请求的话，执行一段时间的提交请求。","source":"_posts/Paxos算法.md","raw":"---\ntitle: Paxos算法\ndate: 2018-01-03 15:40:58\ntags: [一致性,分布式,算法]\ncategory: [分布式,一致性]\n---\n\n在分布式一致性中Paxos算法是一个非常重要的算法，阿里实现的X-Paxos，腾讯的phxpaxos（开源）\n\n\n\n#### Basic Paxos\n\nPaxos四个角色：\n\n- Client：议题提出者\n- Proposer：提议者\n- Acceptor：投票者\n- Learner：决策者\n\n{% asset_img 1.png Basic Paxos %}\n\n  图中只是显示一个提议的执行过程，步骤是\n\n1. Client（提议发起者）提出一个提议，交给一个Propser\n2. 这个Propser带着一个值（可以理解为id）去告诉所有的Acceptor\n3. Acceptor看看自己的id，发现为空，然后就记录下Propser的id。\n4. Propser第二次带着id和提议去找所有的Acceptor，那些记录的id还是自己的话，Acceptor就接受这个提议，记录下并告诉Learner\n5. 当Learner发现这一协议已经超过半数了，那么就代表通过了，然后把信息返回给Client\n\n从执行过程可以看到，朴素Pexos是一个2-Phase，第一阶段先去告诉Acceptor我的id，第二阶段才让Acceptor去接受协议。\n\n> 多Propser的时候要注意\n>\n> 1. 如果一个Propser携带的id比Acceptor记录的小，那么会被拒绝\n> 2. 如果Propser携带的id大于Acceptor的id，那么就覆盖Acceptor的id\n> 3. 如果Propser到达的Acceptor已经接受了某个协议，那么Propser就会把自己的协议改成Acceptor记录的协议\n\n\n\n#### Multi Paxos\n\nBasic Paxos因为是2-Phase，所以延时很高，而且它最后只确定了一个值。而Multi Paxos正好解决了这两个问题。\n\n{% asset_img 2.png Multi Paxos %}\n\n如图所示，Multi Paxos只有一个阶段，其实在Basic Paxos中第一个阶段只是为了防止多个提议照成的冲突，而真正验证是否一致性的是第二个阶段，当超过一半的都已经接受同一个提议，那么则个协议肯定通过了。\n\n而之所以能去掉第一个阶段是因为只有一个Propser在提议，所以只要保证半数成功即可，因为是一个所以不能并发，而这个Propser的选取有的说是使用Basic Paxos来选举的，其实在Paxos原论文有一种更好的方式，就是Acceptor节点接受到其他节点的请求的话，执行一段时间的提交请求。","slug":"Paxos算法","published":1,"updated":"2018-09-13T08:07:39.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm0akt2l00003gvwxk4fzf9q","content":"<p>在分布式一致性中Paxos算法是一个非常重要的算法，阿里实现的X-Paxos，腾讯的phxpaxos（开源）</p>\n<h4 id=\"Basic-Paxos\"><a href=\"#Basic-Paxos\" class=\"headerlink\" title=\"Basic Paxos\"></a>Basic Paxos</h4><p>Paxos四个角色：</p>\n<ul>\n<li>Client：议题提出者</li>\n<li>Proposer：提议者</li>\n<li>Acceptor：投票者</li>\n<li>Learner：决策者</li>\n</ul>\n<img src=\"/2018/01/03/Paxos算法/1.png\" title=\"Basic Paxos\">\n<p>  图中只是显示一个提议的执行过程，步骤是</p>\n<ol>\n<li>Client（提议发起者）提出一个提议，交给一个Propser</li>\n<li>这个Propser带着一个值（可以理解为id）去告诉所有的Acceptor</li>\n<li>Acceptor看看自己的id，发现为空，然后就记录下Propser的id。</li>\n<li>Propser第二次带着id和提议去找所有的Acceptor，那些记录的id还是自己的话，Acceptor就接受这个提议，记录下并告诉Learner</li>\n<li>当Learner发现这一协议已经超过半数了，那么就代表通过了，然后把信息返回给Client</li>\n</ol>\n<p>从执行过程可以看到，朴素Pexos是一个2-Phase，第一阶段先去告诉Acceptor我的id，第二阶段才让Acceptor去接受协议。</p>\n<blockquote>\n<p>多Propser的时候要注意</p>\n<ol>\n<li>如果一个Propser携带的id比Acceptor记录的小，那么会被拒绝</li>\n<li>如果Propser携带的id大于Acceptor的id，那么就覆盖Acceptor的id</li>\n<li>如果Propser到达的Acceptor已经接受了某个协议，那么Propser就会把自己的协议改成Acceptor记录的协议</li>\n</ol>\n</blockquote>\n<h4 id=\"Multi-Paxos\"><a href=\"#Multi-Paxos\" class=\"headerlink\" title=\"Multi Paxos\"></a>Multi Paxos</h4><p>Basic Paxos因为是2-Phase，所以延时很高，而且它最后只确定了一个值。而Multi Paxos正好解决了这两个问题。</p>\n<img src=\"/2018/01/03/Paxos算法/2.png\" title=\"Multi Paxos\">\n<p>如图所示，Multi Paxos只有一个阶段，其实在Basic Paxos中第一个阶段只是为了防止多个提议照成的冲突，而真正验证是否一致性的是第二个阶段，当超过一半的都已经接受同一个提议，那么则个协议肯定通过了。</p>\n<p>而之所以能去掉第一个阶段是因为只有一个Propser在提议，所以只要保证半数成功即可，因为是一个所以不能并发，而这个Propser的选取有的说是使用Basic Paxos来选举的，其实在Paxos原论文有一种更好的方式，就是Acceptor节点接受到其他节点的请求的话，执行一段时间的提交请求。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在分布式一致性中Paxos算法是一个非常重要的算法，阿里实现的X-Paxos，腾讯的phxpaxos（开源）</p>\n<h4 id=\"Basic-Paxos\"><a href=\"#Basic-Paxos\" class=\"headerlink\" title=\"Basic Paxos\"></a>Basic Paxos</h4><p>Paxos四个角色：</p>\n<ul>\n<li>Client：议题提出者</li>\n<li>Proposer：提议者</li>\n<li>Acceptor：投票者</li>\n<li>Learner：决策者</li>\n</ul>\n<img src=\"/2018/01/03/Paxos算法/1.png\" title=\"Basic Paxos\">\n<p>  图中只是显示一个提议的执行过程，步骤是</p>\n<ol>\n<li>Client（提议发起者）提出一个提议，交给一个Propser</li>\n<li>这个Propser带着一个值（可以理解为id）去告诉所有的Acceptor</li>\n<li>Acceptor看看自己的id，发现为空，然后就记录下Propser的id。</li>\n<li>Propser第二次带着id和提议去找所有的Acceptor，那些记录的id还是自己的话，Acceptor就接受这个提议，记录下并告诉Learner</li>\n<li>当Learner发现这一协议已经超过半数了，那么就代表通过了，然后把信息返回给Client</li>\n</ol>\n<p>从执行过程可以看到，朴素Pexos是一个2-Phase，第一阶段先去告诉Acceptor我的id，第二阶段才让Acceptor去接受协议。</p>\n<blockquote>\n<p>多Propser的时候要注意</p>\n<ol>\n<li>如果一个Propser携带的id比Acceptor记录的小，那么会被拒绝</li>\n<li>如果Propser携带的id大于Acceptor的id，那么就覆盖Acceptor的id</li>\n<li>如果Propser到达的Acceptor已经接受了某个协议，那么Propser就会把自己的协议改成Acceptor记录的协议</li>\n</ol>\n</blockquote>\n<h4 id=\"Multi-Paxos\"><a href=\"#Multi-Paxos\" class=\"headerlink\" title=\"Multi Paxos\"></a>Multi Paxos</h4><p>Basic Paxos因为是2-Phase，所以延时很高，而且它最后只确定了一个值。而Multi Paxos正好解决了这两个问题。</p>\n<img src=\"/2018/01/03/Paxos算法/2.png\" title=\"Multi Paxos\">\n<p>如图所示，Multi Paxos只有一个阶段，其实在Basic Paxos中第一个阶段只是为了防止多个提议照成的冲突，而真正验证是否一致性的是第二个阶段，当超过一半的都已经接受同一个提议，那么则个协议肯定通过了。</p>\n<p>而之所以能去掉第一个阶段是因为只有一个Propser在提议，所以只要保证半数成功即可，因为是一个所以不能并发，而这个Propser的选取有的说是使用Basic Paxos来选举的，其实在Paxos原论文有一种更好的方式，就是Acceptor节点接受到其他节点的请求的话，执行一段时间的提交请求。</p>\n"},{"title":"String之intern函数","date":"2017-12-04T03:36:18.000Z","_content":"在讲解正式内容前，先来看看JVM的内存模型，以及1.6和1.7还有1.8的内存模型有什么不同。\n\n{% asset_img 1.png JVM内存图 %}\n\n> 虚拟机栈里面存放的就是一个一个的栈帧（栈帧是用来存储数据和存储部分过程结果的数据结构），而且只有一个活跃的栈帧，也就是栈顶元素\n\n> 本地方法栈根据名字就知道他是为本地方法服务的（本地方法只是用java语言定义了，但是具体实现可能就是别的语言了）,他里面存放的就是本地方法帧，用于调用执行本地方法\n\n> 程序计数器里面存放的内容可以理解为当前字节码的执行地址，用以完成分支，循环，跳转，异常处理，线程恢复等基础功能\n\n> 堆内存：图1所画的是1.6时候的，这时堆中还只有新生代和老年代，新生代占1/3，老年代占2/3，Eden占新生代的8/10（所以新生代实际有效空间为9/10）\n\n> 方法区：方法区是堆的逻辑组成部分，用来存放类的基础信息，可以分为以下几类，运行时常量，域信息，方法信息，静态变量等信息。\n\n同时通过上面的图我们可以看到：虚拟机栈，本地方法栈，程序计数器都是线程私有的，而堆和方法区是线程共有的。\n\n---\n\n在1.6中PermGen（永久代）存放在方法区中\n在1.7中PermGen（永久代）中的符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap。\n在1.8中方法区已经没有了，出来了一个Metaspace（元空间），其实和永久代一样，都是对方法区的实现，但是元空间已经不在JVM虚拟机里面了，而是在虚拟机外面的内存空间\n\n> 那么为什么要移除方法区呢？个人认为是方法区是在启动时确认的，这样会照成内存溢出，而且永久代的回收实现相对比较麻烦\n\n---\n\n终于可以讲正式内容了\n\n首先看一段代码\n\n```java\n\tpublic static void main(String[] args) {\n        String s1 = new String(\"1\");\n        s1.intern();\n        String s2 = \"1\";\n        System.out.println(s1 == s2);\n\n        String s3 = new String(\"1\") + new String(\"1\");\n        s3.intern();\n        String s4 = \"11\";\n        System.out.println(s3 == s4);\n    }\n```\n\n输出结果为：\n\n```java\njdk6 下false false\njdk7 下false true\njdk8 下false true\n```\n\n{% asset_img 2.png 1.6内存图 %}\n\n> 第一行，new String（“1”）会现在String常量池里面创建一个1的常量，然后在堆里面创建一个String对象，内容指向常量池中的1，然后s1只想堆中对象\n>\n> 第二行，s1.intern的作用的去常量池里面查看有没有1这个变量，如果没有的话创建\n>\n> 第三行String s2 = \"1\"这种创建方法，会直接让s2指向常量池中的1\n>\n> 第四行，因为s1指向的是堆中地址，s2指向的是常量池中地址，所以肯定为false\n>\n> 第五行首先和第一行一样，创建两个匿名对象，然后在堆内存中创建一个String对象，对象的值为11，然后让s3指向这个对象\n>\n> 第六行，查看常量池没有11，创建，并让堆中对象指向该地址\n>\n> 第七行，s4指向常量池中11\n>\n> 第八行，因为s3指向的是堆中地址，s4指向的是常量池中地址，所以为false\n\n那么为什么1.7和1.8输出为true呢？这就是内存模型改变照成的\n\n{% asset_img 3.png 1.7内存图 %}\n\n> 注意看箭头指向\n>\n> 前面已经说过，在1.6以后，已经把一部分内容移动到了heap中，而String poll就放到了堆中，那么既然都在堆中，没必要创建两份对象吧？\n>\n> 所以第六行的改变就变成了，查看String poll中没有11这个变量，然后就在常量池中开辟一片空间，然后让他指向堆内存的对象（这样一个堆里面，同样的对象只存在一个，别的都是引用）\n>\n> 所以第八行就成了，s3的值为堆中地址，s4也为堆中地址，所以为true","source":"_posts/String之intern函数.md","raw":"---\ntitle: String之intern函数\ndate: 2017-12-04 11:36:18\ntags: [java,面试,基础]\ncategory: java基础\n---\n在讲解正式内容前，先来看看JVM的内存模型，以及1.6和1.7还有1.8的内存模型有什么不同。\n\n{% asset_img 1.png JVM内存图 %}\n\n> 虚拟机栈里面存放的就是一个一个的栈帧（栈帧是用来存储数据和存储部分过程结果的数据结构），而且只有一个活跃的栈帧，也就是栈顶元素\n\n> 本地方法栈根据名字就知道他是为本地方法服务的（本地方法只是用java语言定义了，但是具体实现可能就是别的语言了）,他里面存放的就是本地方法帧，用于调用执行本地方法\n\n> 程序计数器里面存放的内容可以理解为当前字节码的执行地址，用以完成分支，循环，跳转，异常处理，线程恢复等基础功能\n\n> 堆内存：图1所画的是1.6时候的，这时堆中还只有新生代和老年代，新生代占1/3，老年代占2/3，Eden占新生代的8/10（所以新生代实际有效空间为9/10）\n\n> 方法区：方法区是堆的逻辑组成部分，用来存放类的基础信息，可以分为以下几类，运行时常量，域信息，方法信息，静态变量等信息。\n\n同时通过上面的图我们可以看到：虚拟机栈，本地方法栈，程序计数器都是线程私有的，而堆和方法区是线程共有的。\n\n---\n\n在1.6中PermGen（永久代）存放在方法区中\n在1.7中PermGen（永久代）中的符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap。\n在1.8中方法区已经没有了，出来了一个Metaspace（元空间），其实和永久代一样，都是对方法区的实现，但是元空间已经不在JVM虚拟机里面了，而是在虚拟机外面的内存空间\n\n> 那么为什么要移除方法区呢？个人认为是方法区是在启动时确认的，这样会照成内存溢出，而且永久代的回收实现相对比较麻烦\n\n---\n\n终于可以讲正式内容了\n\n首先看一段代码\n\n```java\n\tpublic static void main(String[] args) {\n        String s1 = new String(\"1\");\n        s1.intern();\n        String s2 = \"1\";\n        System.out.println(s1 == s2);\n\n        String s3 = new String(\"1\") + new String(\"1\");\n        s3.intern();\n        String s4 = \"11\";\n        System.out.println(s3 == s4);\n    }\n```\n\n输出结果为：\n\n```java\njdk6 下false false\njdk7 下false true\njdk8 下false true\n```\n\n{% asset_img 2.png 1.6内存图 %}\n\n> 第一行，new String（“1”）会现在String常量池里面创建一个1的常量，然后在堆里面创建一个String对象，内容指向常量池中的1，然后s1只想堆中对象\n>\n> 第二行，s1.intern的作用的去常量池里面查看有没有1这个变量，如果没有的话创建\n>\n> 第三行String s2 = \"1\"这种创建方法，会直接让s2指向常量池中的1\n>\n> 第四行，因为s1指向的是堆中地址，s2指向的是常量池中地址，所以肯定为false\n>\n> 第五行首先和第一行一样，创建两个匿名对象，然后在堆内存中创建一个String对象，对象的值为11，然后让s3指向这个对象\n>\n> 第六行，查看常量池没有11，创建，并让堆中对象指向该地址\n>\n> 第七行，s4指向常量池中11\n>\n> 第八行，因为s3指向的是堆中地址，s4指向的是常量池中地址，所以为false\n\n那么为什么1.7和1.8输出为true呢？这就是内存模型改变照成的\n\n{% asset_img 3.png 1.7内存图 %}\n\n> 注意看箭头指向\n>\n> 前面已经说过，在1.6以后，已经把一部分内容移动到了heap中，而String poll就放到了堆中，那么既然都在堆中，没必要创建两份对象吧？\n>\n> 所以第六行的改变就变成了，查看String poll中没有11这个变量，然后就在常量池中开辟一片空间，然后让他指向堆内存的对象（这样一个堆里面，同样的对象只存在一个，别的都是引用）\n>\n> 所以第八行就成了，s3的值为堆中地址，s4也为堆中地址，所以为true","slug":"String之intern函数","published":1,"updated":"2018-09-13T08:29:08.656Z","_id":"cjm0akt2p00013gvw2nkrxwfk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在讲解正式内容前，先来看看JVM的内存模型，以及1.6和1.7还有1.8的内存模型有什么不同。</p>\n<img src=\"/2017/12/04/String之intern函数/1.png\" title=\"JVM内存图\">\n<blockquote>\n<p>虚拟机栈里面存放的就是一个一个的栈帧（栈帧是用来存储数据和存储部分过程结果的数据结构），而且只有一个活跃的栈帧，也就是栈顶元素</p>\n<p>本地方法栈根据名字就知道他是为本地方法服务的（本地方法只是用java语言定义了，但是具体实现可能就是别的语言了）,他里面存放的就是本地方法帧，用于调用执行本地方法</p>\n<p>程序计数器里面存放的内容可以理解为当前字节码的执行地址，用以完成分支，循环，跳转，异常处理，线程恢复等基础功能</p>\n<p>堆内存：图1所画的是1.6时候的，这时堆中还只有新生代和老年代，新生代占1/3，老年代占2/3，Eden占新生代的8/10（所以新生代实际有效空间为9/10）</p>\n<p>方法区：方法区是堆的逻辑组成部分，用来存放类的基础信息，可以分为以下几类，运行时常量，域信息，方法信息，静态变量等信息。</p>\n</blockquote>\n<p>同时通过上面的图我们可以看到：虚拟机栈，本地方法栈，程序计数器都是线程私有的，而堆和方法区是线程共有的。</p>\n<hr>\n<p>在1.6中PermGen（永久代）存放在方法区中<br>在1.7中PermGen（永久代）中的符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap。<br>在1.8中方法区已经没有了，出来了一个Metaspace（元空间），其实和永久代一样，都是对方法区的实现，但是元空间已经不在JVM虚拟机里面了，而是在虚拟机外面的内存空间</p>\n<blockquote>\n<p>那么为什么要移除方法区呢？个人认为是方法区是在启动时确认的，这样会照成内存溢出，而且永久代的回收实现相对比较麻烦</p>\n</blockquote>\n<hr>\n<p>终于可以讲正式内容了</p>\n<p>首先看一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">       s1.intern();</span><br><span class=\"line\">       String s2 = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">       System.out.println(s1 == s2);</span><br><span class=\"line\"></span><br><span class=\"line\">       String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">       s3.intern();</span><br><span class=\"line\">       String s4 = <span class=\"string\">\"11\"</span>;</span><br><span class=\"line\">       System.out.println(s3 == s4);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdk6 下<span class=\"keyword\">false</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">jdk7 下<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">jdk8 下<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<img src=\"/2017/12/04/String之intern函数/2.png\" title=\"1.6内存图\">\n<blockquote>\n<p>第一行，new String（“1”）会现在String常量池里面创建一个1的常量，然后在堆里面创建一个String对象，内容指向常量池中的1，然后s1只想堆中对象</p>\n<p>第二行，s1.intern的作用的去常量池里面查看有没有1这个变量，如果没有的话创建</p>\n<p>第三行String s2 = “1”这种创建方法，会直接让s2指向常量池中的1</p>\n<p>第四行，因为s1指向的是堆中地址，s2指向的是常量池中地址，所以肯定为false</p>\n<p>第五行首先和第一行一样，创建两个匿名对象，然后在堆内存中创建一个String对象，对象的值为11，然后让s3指向这个对象</p>\n<p>第六行，查看常量池没有11，创建，并让堆中对象指向该地址</p>\n<p>第七行，s4指向常量池中11</p>\n<p>第八行，因为s3指向的是堆中地址，s4指向的是常量池中地址，所以为false</p>\n</blockquote>\n<p>那么为什么1.7和1.8输出为true呢？这就是内存模型改变照成的</p>\n<img src=\"/2017/12/04/String之intern函数/3.png\" title=\"1.7内存图\">\n<blockquote>\n<p>注意看箭头指向</p>\n<p>前面已经说过，在1.6以后，已经把一部分内容移动到了heap中，而String poll就放到了堆中，那么既然都在堆中，没必要创建两份对象吧？</p>\n<p>所以第六行的改变就变成了，查看String poll中没有11这个变量，然后就在常量池中开辟一片空间，然后让他指向堆内存的对象（这样一个堆里面，同样的对象只存在一个，别的都是引用）</p>\n<p>所以第八行就成了，s3的值为堆中地址，s4也为堆中地址，所以为true</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在讲解正式内容前，先来看看JVM的内存模型，以及1.6和1.7还有1.8的内存模型有什么不同。</p>\n<img src=\"/2017/12/04/String之intern函数/1.png\" title=\"JVM内存图\">\n<blockquote>\n<p>虚拟机栈里面存放的就是一个一个的栈帧（栈帧是用来存储数据和存储部分过程结果的数据结构），而且只有一个活跃的栈帧，也就是栈顶元素</p>\n<p>本地方法栈根据名字就知道他是为本地方法服务的（本地方法只是用java语言定义了，但是具体实现可能就是别的语言了）,他里面存放的就是本地方法帧，用于调用执行本地方法</p>\n<p>程序计数器里面存放的内容可以理解为当前字节码的执行地址，用以完成分支，循环，跳转，异常处理，线程恢复等基础功能</p>\n<p>堆内存：图1所画的是1.6时候的，这时堆中还只有新生代和老年代，新生代占1/3，老年代占2/3，Eden占新生代的8/10（所以新生代实际有效空间为9/10）</p>\n<p>方法区：方法区是堆的逻辑组成部分，用来存放类的基础信息，可以分为以下几类，运行时常量，域信息，方法信息，静态变量等信息。</p>\n</blockquote>\n<p>同时通过上面的图我们可以看到：虚拟机栈，本地方法栈，程序计数器都是线程私有的，而堆和方法区是线程共有的。</p>\n<hr>\n<p>在1.6中PermGen（永久代）存放在方法区中<br>在1.7中PermGen（永久代）中的符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap。<br>在1.8中方法区已经没有了，出来了一个Metaspace（元空间），其实和永久代一样，都是对方法区的实现，但是元空间已经不在JVM虚拟机里面了，而是在虚拟机外面的内存空间</p>\n<blockquote>\n<p>那么为什么要移除方法区呢？个人认为是方法区是在启动时确认的，这样会照成内存溢出，而且永久代的回收实现相对比较麻烦</p>\n</blockquote>\n<hr>\n<p>终于可以讲正式内容了</p>\n<p>首先看一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       String s1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">       s1.intern();</span><br><span class=\"line\">       String s2 = <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">       System.out.println(s1 == s2);</span><br><span class=\"line\"></span><br><span class=\"line\">       String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">       s3.intern();</span><br><span class=\"line\">       String s4 = <span class=\"string\">\"11\"</span>;</span><br><span class=\"line\">       System.out.println(s3 == s4);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdk6 下<span class=\"keyword\">false</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">jdk7 下<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">jdk8 下<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n<img src=\"/2017/12/04/String之intern函数/2.png\" title=\"1.6内存图\">\n<blockquote>\n<p>第一行，new String（“1”）会现在String常量池里面创建一个1的常量，然后在堆里面创建一个String对象，内容指向常量池中的1，然后s1只想堆中对象</p>\n<p>第二行，s1.intern的作用的去常量池里面查看有没有1这个变量，如果没有的话创建</p>\n<p>第三行String s2 = “1”这种创建方法，会直接让s2指向常量池中的1</p>\n<p>第四行，因为s1指向的是堆中地址，s2指向的是常量池中地址，所以肯定为false</p>\n<p>第五行首先和第一行一样，创建两个匿名对象，然后在堆内存中创建一个String对象，对象的值为11，然后让s3指向这个对象</p>\n<p>第六行，查看常量池没有11，创建，并让堆中对象指向该地址</p>\n<p>第七行，s4指向常量池中11</p>\n<p>第八行，因为s3指向的是堆中地址，s4指向的是常量池中地址，所以为false</p>\n</blockquote>\n<p>那么为什么1.7和1.8输出为true呢？这就是内存模型改变照成的</p>\n<img src=\"/2017/12/04/String之intern函数/3.png\" title=\"1.7内存图\">\n<blockquote>\n<p>注意看箭头指向</p>\n<p>前面已经说过，在1.6以后，已经把一部分内容移动到了heap中，而String poll就放到了堆中，那么既然都在堆中，没必要创建两份对象吧？</p>\n<p>所以第六行的改变就变成了，查看String poll中没有11这个变量，然后就在常量池中开辟一片空间，然后让他指向堆内存的对象（这样一个堆里面，同样的对象只存在一个，别的都是引用）</p>\n<p>所以第八行就成了，s3的值为堆中地址，s4也为堆中地址，所以为true</p>\n</blockquote>\n"},{"title":"java之char数组输出","date":"2015-02-07T02:37:46.000Z","_content":"首先println方法对数组的处理是先转化为String类型，我们可以进入println源码看一下，我是创建了一个String数组进去看了下\n\n```Java\n    public void println(Object x) {\n        String s = String.valueOf(x);\n        synchronized (this) {\n            print(s);\n            newLine();\n        }\n    }\n```\n\n首先他都转化成了String，然后进入print方法\n\n```Java\n    public void print(String s) {\n        if (s == null) {\n            s = \"null\";\n        }\n        write(s);\n    }\n\n```\n\n接下来我们再进入write方法\n\n```Java\n    private void write(String s) {\n        try {\n            synchronized (this) {\n                ensureOpen();//确认输出流是否打开了\n                textOut.write(s);//就是一个bufferWriter，写入到缓冲区\n                textOut.flushBuffer();//刷新缓存区\n                charOut.flushBuffer();//OutputStreamWriter\n                if (autoFlush && (s.indexOf('\\n') >= 0))\n                    out.flush();//这里就是与char数组的却别，他直接把String s刷新到了控制台的输出流中，但是记住他没有和toString方法相关联\n            }\n        }\n        catch (InterruptedIOException x) {\n            Thread.currentThread().interrupt();\n        }\n        catch (IOException x) {\n            trouble = true;\n        }\n    }\n```\n\n那我们看看char数组的write方法\n\n```Java\n    private void write(char buf[]) {\n        try {\n            synchronized (this) {\n                ensureOpen();\n                textOut.write(buf);\n                textOut.flushBuffer();\n                charOut.flushBuffer();\n                if (autoFlush) {//我们可以看到，他是把每个字符都写入到了控制台的输出流了。\n                    for (int i = 0; i < buf.length; i++)\n                        if (buf[i] == '\\n')\n                            out.flush();\n                }\n            }\n        }\n        catch (InterruptedIOException x) {\n            Thread.currentThread().interrupt();\n        }\n        catch (IOException x) {\n            trouble = true;\n        }\n    }\n```\n\n其实这是第二次遇到这问题了，但是之前没有非常明白，这里弄清楚记录一下，也供大家参考一下","source":"_posts/java之char数组输出.md","raw":"---\ntitle: java之char数组输出\ndate: 2015-02-07 10:37:46\ntags: [java,基础]\ncategory: java基础\n---\n首先println方法对数组的处理是先转化为String类型，我们可以进入println源码看一下，我是创建了一个String数组进去看了下\n\n```Java\n    public void println(Object x) {\n        String s = String.valueOf(x);\n        synchronized (this) {\n            print(s);\n            newLine();\n        }\n    }\n```\n\n首先他都转化成了String，然后进入print方法\n\n```Java\n    public void print(String s) {\n        if (s == null) {\n            s = \"null\";\n        }\n        write(s);\n    }\n\n```\n\n接下来我们再进入write方法\n\n```Java\n    private void write(String s) {\n        try {\n            synchronized (this) {\n                ensureOpen();//确认输出流是否打开了\n                textOut.write(s);//就是一个bufferWriter，写入到缓冲区\n                textOut.flushBuffer();//刷新缓存区\n                charOut.flushBuffer();//OutputStreamWriter\n                if (autoFlush && (s.indexOf('\\n') >= 0))\n                    out.flush();//这里就是与char数组的却别，他直接把String s刷新到了控制台的输出流中，但是记住他没有和toString方法相关联\n            }\n        }\n        catch (InterruptedIOException x) {\n            Thread.currentThread().interrupt();\n        }\n        catch (IOException x) {\n            trouble = true;\n        }\n    }\n```\n\n那我们看看char数组的write方法\n\n```Java\n    private void write(char buf[]) {\n        try {\n            synchronized (this) {\n                ensureOpen();\n                textOut.write(buf);\n                textOut.flushBuffer();\n                charOut.flushBuffer();\n                if (autoFlush) {//我们可以看到，他是把每个字符都写入到了控制台的输出流了。\n                    for (int i = 0; i < buf.length; i++)\n                        if (buf[i] == '\\n')\n                            out.flush();\n                }\n            }\n        }\n        catch (InterruptedIOException x) {\n            Thread.currentThread().interrupt();\n        }\n        catch (IOException x) {\n            trouble = true;\n        }\n    }\n```\n\n其实这是第二次遇到这问题了，但是之前没有非常明白，这里弄清楚记录一下，也供大家参考一下","slug":"java之char数组输出","published":1,"updated":"2018-09-13T06:40:39.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm0akt2t00043gvwade9wi1m","content":"<p>首先println方法对数组的处理是先转化为String类型，我们可以进入println源码看一下，我是创建了一个String数组进去看了下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    String s = String.valueOf(x);</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        print(s);</span><br><span class=\"line\">        newLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先他都转化成了String，然后进入print方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我们再进入write方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            ensureOpen();<span class=\"comment\">//确认输出流是否打开了</span></span><br><span class=\"line\">            textOut.write(s);<span class=\"comment\">//就是一个bufferWriter，写入到缓冲区</span></span><br><span class=\"line\">            textOut.flushBuffer();<span class=\"comment\">//刷新缓存区</span></span><br><span class=\"line\">            charOut.flushBuffer();<span class=\"comment\">//OutputStreamWriter</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (autoFlush &amp;&amp; (s.indexOf(<span class=\"string\">'\\n'</span>) &gt;= <span class=\"number\">0</span>))</span><br><span class=\"line\">                out.flush();<span class=\"comment\">//这里就是与char数组的却别，他直接把String s刷新到了控制台的输出流中，但是记住他没有和toString方法相关联</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InterruptedIOException x) &#123;</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IOException x) &#123;</span><br><span class=\"line\">        trouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那我们看看char数组的write方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">char</span> buf[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            ensureOpen();</span><br><span class=\"line\">            textOut.write(buf);</span><br><span class=\"line\">            textOut.flushBuffer();</span><br><span class=\"line\">            charOut.flushBuffer();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (autoFlush) &#123;<span class=\"comment\">//我们可以看到，他是把每个字符都写入到了控制台的输出流了。</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buf.length; i++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (buf[i] == <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">                        out.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InterruptedIOException x) &#123;</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IOException x) &#123;</span><br><span class=\"line\">        trouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实这是第二次遇到这问题了，但是之前没有非常明白，这里弄清楚记录一下，也供大家参考一下</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先println方法对数组的处理是先转化为String类型，我们可以进入println源码看一下，我是创建了一个String数组进去看了下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">println</span><span class=\"params\">(Object x)</span> </span>&#123;</span><br><span class=\"line\">    String s = String.valueOf(x);</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        print(s);</span><br><span class=\"line\">        newLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先他都转化成了String，然后进入print方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    write(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我们再进入write方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            ensureOpen();<span class=\"comment\">//确认输出流是否打开了</span></span><br><span class=\"line\">            textOut.write(s);<span class=\"comment\">//就是一个bufferWriter，写入到缓冲区</span></span><br><span class=\"line\">            textOut.flushBuffer();<span class=\"comment\">//刷新缓存区</span></span><br><span class=\"line\">            charOut.flushBuffer();<span class=\"comment\">//OutputStreamWriter</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (autoFlush &amp;&amp; (s.indexOf(<span class=\"string\">'\\n'</span>) &gt;= <span class=\"number\">0</span>))</span><br><span class=\"line\">                out.flush();<span class=\"comment\">//这里就是与char数组的却别，他直接把String s刷新到了控制台的输出流中，但是记住他没有和toString方法相关联</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InterruptedIOException x) &#123;</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IOException x) &#123;</span><br><span class=\"line\">        trouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那我们看看char数组的write方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">char</span> buf[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            ensureOpen();</span><br><span class=\"line\">            textOut.write(buf);</span><br><span class=\"line\">            textOut.flushBuffer();</span><br><span class=\"line\">            charOut.flushBuffer();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (autoFlush) &#123;<span class=\"comment\">//我们可以看到，他是把每个字符都写入到了控制台的输出流了。</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buf.length; i++)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (buf[i] == <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">                        out.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InterruptedIOException x) &#123;</span><br><span class=\"line\">        Thread.currentThread().interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IOException x) &#123;</span><br><span class=\"line\">        trouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实这是第二次遇到这问题了，但是之前没有非常明白，这里弄清楚记录一下，也供大家参考一下</p>\n"},{"title":"java值传递和引用传递","date":"2017-01-23T06:09:58.000Z","_content":"这是一道面试题\n之前被问到过，但是过后也没好好想想，今天有朋友问到这个，查过资料以后总结下\n先看一段代码：\n<!-- more -->\n```java\npublic class Test{\n    public static void main(String[] args) {\n        String str = \"A\";  \n        change(str);\n        System.out.println(str);\n        \n        Integer i = new Integer(10);\n        changeb(i);\n        System.out.println(i);\n        \n        int j = 10;\n        changed(j);\n        System.out.println(j);\n        \n        Stu stu = new Stu(\"colin\");\n        changec(stu);\n        System.out.println(stu);\n\n    }\n\n    private static void changed(Integer j) {\n        j = 20;\n    }\n    \n    private static void changec(Stu stu) {\n        stu.name = \"libra\";\n//        stu = new Stu(\"libra\");\n    }\n    \n    private static void changeb(Integer i) {\n        i = new Integer(20);\n    }\n    \n    private static void change(String str) {\n        str = \"B\";\n    }\n}\nclass Stu {\n    String name;\n    \n    public Stu(String name) {\n        this.name = name;\n    }\n    \n    @Override\n    public String toString() {\n        return \"Stu{\" +\n                \"name='\" + name + '\\'' +\n                '}';\n    }\n}\n```\n<h5>结果</h5>\n```java\nA\n10\n10\nStu{name='wtx'}\n```\n<h5>个人理解：</h5>\njava中传递方式分为值传递和引用传递\n值传递：基本类型(byte--short--int--long--float--double--boolean--char)\n引用传递：类类型，接口类型，数组\n<h6>例子一：String</h6>\n{% asset_img 1.png java内存图 %}\nString是在常量池中的，这些无所谓，有所谓的是引用传递传递的是地址，A的地址是0x1101现在把0x1101传递过去，让实参str接受，这时候str也指向了0x1101，这时候修改实参str的指向，只是修改了实参的指向，没有修改外面str的指向，所有输出为A\n<h6>例子二：Integer，Double包装类</h6>\n这些包装类里面没有修改值的操作，而且是final类型的，所以我们修改值的时候不是在原来的基础上修改，所以输出10\n<h6>例子三：基本类型</h6>\n基本类型就是值传递，不涉及引用，不修改外面值\n<h6>例子四：修改对象值</h6>\n对于例子四，如果使用第一行代码的话，我们是在原对象中修改，故会改变外面的值，但是如果我们是用第二种，那只是改变了内部引用，不影响外面值的变化\n\n\n","source":"_posts/java值传递和引用传递.md","raw":"---\ntitle: java值传递和引用传递\ndate: 2017-01-23 14:09:58\ntags: [java,面试,基础]\ncategory: java基础\n---\n这是一道面试题\n之前被问到过，但是过后也没好好想想，今天有朋友问到这个，查过资料以后总结下\n先看一段代码：\n<!-- more -->\n```java\npublic class Test{\n    public static void main(String[] args) {\n        String str = \"A\";  \n        change(str);\n        System.out.println(str);\n        \n        Integer i = new Integer(10);\n        changeb(i);\n        System.out.println(i);\n        \n        int j = 10;\n        changed(j);\n        System.out.println(j);\n        \n        Stu stu = new Stu(\"colin\");\n        changec(stu);\n        System.out.println(stu);\n\n    }\n\n    private static void changed(Integer j) {\n        j = 20;\n    }\n    \n    private static void changec(Stu stu) {\n        stu.name = \"libra\";\n//        stu = new Stu(\"libra\");\n    }\n    \n    private static void changeb(Integer i) {\n        i = new Integer(20);\n    }\n    \n    private static void change(String str) {\n        str = \"B\";\n    }\n}\nclass Stu {\n    String name;\n    \n    public Stu(String name) {\n        this.name = name;\n    }\n    \n    @Override\n    public String toString() {\n        return \"Stu{\" +\n                \"name='\" + name + '\\'' +\n                '}';\n    }\n}\n```\n<h5>结果</h5>\n```java\nA\n10\n10\nStu{name='wtx'}\n```\n<h5>个人理解：</h5>\njava中传递方式分为值传递和引用传递\n值传递：基本类型(byte--short--int--long--float--double--boolean--char)\n引用传递：类类型，接口类型，数组\n<h6>例子一：String</h6>\n{% asset_img 1.png java内存图 %}\nString是在常量池中的，这些无所谓，有所谓的是引用传递传递的是地址，A的地址是0x1101现在把0x1101传递过去，让实参str接受，这时候str也指向了0x1101，这时候修改实参str的指向，只是修改了实参的指向，没有修改外面str的指向，所有输出为A\n<h6>例子二：Integer，Double包装类</h6>\n这些包装类里面没有修改值的操作，而且是final类型的，所以我们修改值的时候不是在原来的基础上修改，所以输出10\n<h6>例子三：基本类型</h6>\n基本类型就是值传递，不涉及引用，不修改外面值\n<h6>例子四：修改对象值</h6>\n对于例子四，如果使用第一行代码的话，我们是在原对象中修改，故会改变外面的值，但是如果我们是用第二种，那只是改变了内部引用，不影响外面值的变化\n\n\n","slug":"java值传递和引用传递","published":1,"updated":"2018-09-13T08:29:41.173Z","_id":"cjm0akt2x00053gvwg7lxhmnk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是一道面试题<br>之前被问到过，但是过后也没好好想想，今天有朋友问到这个，查过资料以后总结下<br>先看一段代码：<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"A\"</span>;  </span><br><span class=\"line\">        change(str);</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Integer i = <span class=\"keyword\">new</span> Integer(<span class=\"number\">10</span>);</span><br><span class=\"line\">        changeb(i);</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">10</span>;</span><br><span class=\"line\">        changed(j);</span><br><span class=\"line\">        System.out.println(j);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Stu stu = <span class=\"keyword\">new</span> Stu(<span class=\"string\">\"colin\"</span>);</span><br><span class=\"line\">        changec(stu);</span><br><span class=\"line\">        System.out.println(stu);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changed</span><span class=\"params\">(Integer j)</span> </span>&#123;</span><br><span class=\"line\">        j = <span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changec</span><span class=\"params\">(Stu stu)</span> </span>&#123;</span><br><span class=\"line\">        stu.name = <span class=\"string\">\"libra\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//        stu = new Stu(\"libra\");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeb</span><span class=\"params\">(Integer i)</span> </span>&#123;</span><br><span class=\"line\">        i = <span class=\"keyword\">new</span> Integer(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        str = <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stu</span> </span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stu</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Stu&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p></p><h5>结果</h5><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">Stu&#123;name=<span class=\"string\">'wtx'</span>&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p></p><h5>个人理解：</h5><br>java中传递方式分为值传递和引用传递<br>值传递：基本类型(byte–short–int–long–float–double–boolean–char)<br>引用传递：类类型，接口类型，数组<p></p>\n<p></p><h6>例子一：String</h6><br><img src=\"/2017/01/23/java值传递和引用传递/1.png\" title=\"java内存图\"><br>String是在常量池中的，这些无所谓，有所谓的是引用传递传递的是地址，A的地址是0x1101现在把0x1101传递过去，让实参str接受，这时候str也指向了0x1101，这时候修改实参str的指向，只是修改了实参的指向，没有修改外面str的指向，所有输出为A<p></p>\n<p></p><h6>例子二：Integer，Double包装类</h6><br>这些包装类里面没有修改值的操作，而且是final类型的，所以我们修改值的时候不是在原来的基础上修改，所以输出10<p></p>\n<p></p><h6>例子三：基本类型</h6><br>基本类型就是值传递，不涉及引用，不修改外面值<p></p>\n<p></p><h6>例子四：修改对象值</h6><br>对于例子四，如果使用第一行代码的话，我们是在原对象中修改，故会改变外面的值，但是如果我们是用第二种，那只是改变了内部引用，不影响外面值的变化<p></p>\n","site":{"data":{}},"excerpt":"<p>这是一道面试题<br>之前被问到过，但是过后也没好好想想，今天有朋友问到这个，查过资料以后总结下<br>先看一段代码：<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"A\"</span>;  </span><br><span class=\"line\">        change(str);</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Integer i = <span class=\"keyword\">new</span> Integer(<span class=\"number\">10</span>);</span><br><span class=\"line\">        changeb(i);</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">10</span>;</span><br><span class=\"line\">        changed(j);</span><br><span class=\"line\">        System.out.println(j);</span><br><span class=\"line\">        </span><br><span class=\"line\">        Stu stu = <span class=\"keyword\">new</span> Stu(<span class=\"string\">\"colin\"</span>);</span><br><span class=\"line\">        changec(stu);</span><br><span class=\"line\">        System.out.println(stu);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changed</span><span class=\"params\">(Integer j)</span> </span>&#123;</span><br><span class=\"line\">        j = <span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changec</span><span class=\"params\">(Stu stu)</span> </span>&#123;</span><br><span class=\"line\">        stu.name = <span class=\"string\">\"libra\"</span>;</span><br><span class=\"line\"><span class=\"comment\">//        stu = new Stu(\"libra\");</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">changeb</span><span class=\"params\">(Integer i)</span> </span>&#123;</span><br><span class=\"line\">        i = <span class=\"keyword\">new</span> Integer(<span class=\"number\">20</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        str = <span class=\"string\">\"B\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stu</span> </span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stu</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Stu&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p></p><h5>结果</h5><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">Stu&#123;name=<span class=\"string\">'wtx'</span>&#125;</span><br></pre></td></tr></table></figure><p></p>\n<p></p><h5>个人理解：</h5><br>java中传递方式分为值传递和引用传递<br>值传递：基本类型(byte–short–int–long–float–double–boolean–char)<br>引用传递：类类型，接口类型，数组<p></p>\n<p></p><h6>例子一：String</h6><br><img src=\"/2017/01/23/java值传递和引用传递/1.png\" title=\"java内存图\"><br>String是在常量池中的，这些无所谓，有所谓的是引用传递传递的是地址，A的地址是0x1101现在把0x1101传递过去，让实参str接受，这时候str也指向了0x1101，这时候修改实参str的指向，只是修改了实参的指向，没有修改外面str的指向，所有输出为A<p></p>\n<p></p><h6>例子二：Integer，Double包装类</h6><br>这些包装类里面没有修改值的操作，而且是final类型的，所以我们修改值的时候不是在原来的基础上修改，所以输出10<p></p>\n<p></p><h6>例子三：基本类型</h6><br>基本类型就是值传递，不涉及引用，不修改外面值<p></p>\n<p></p><h6>例子四：修改对象值</h6><br>对于例子四，如果使用第一行代码的话，我们是在原对象中修改，故会改变外面的值，但是如果我们是用第二种，那只是改变了内部引用，不影响外面值的变化<p></p>"},{"title":"session共享解决方案","date":"2017-10-09T07:41:36.000Z","_content":"\n用户通过浏览器访问服务器的时候，服务器会自动产生session，用来存放用户信息，登录信息等内容，在分布式的系统中，如何保证session的一致性呢？\n\n- 方法一：session同步\n\n  这个很好解释，也就是每新生成一个session，我们都把他同步到所有的服务器上面，这样每台服务器都有所有用户的session了，这是一种解决方法\n\n  优点：实现思路简单\n\n  缺点：\n\n  1. 占用带宽，也就是每次都要去同步session，当服务器多的时候情况会很明显\n  2. 占用内存，每台服务器都要存储所有的session，当session多的时候情况会很明显\n\n- 方法二：客户端存储\n\n  用客户端来存放用户信息，登录信息等内容，下次请求的时候携带过来就行了，也是一种实现方法\n\n  优点：服务端不用存储\n\n  缺点：\n\n  1. 安全性下降：cookie容易被窃取\n  2. 存储数据量小，不同浏览器允许的cookie大小有限。\n\n- 方法三：一致性hash\n\n  使用一致性hash算法计算出每个session存放的服务器，例如使用IP来做一致性hash，那么这个IP对应的session存放在哪一台服务器就确定了\n\n  优点：\n\n  1. 工作量小，不需要更改代码，只要配置nginx就可以了\n  2. 支持水平扩展\n\n  缺点：\n\n  1. 当新水平扩展的时候，要从新计算hash值，用户需要重新登录\n  2. 服务器重启，数据丢失\n\n- 方法四：后台统一存储\n\n  把session存放到数据库或缓存中\n\n  优点：\n\n  1. 安全性高：即便重启了数据依然存在\n  2. 水平扩展：因为session是单独存储的，所以不影响水平扩展\n\n  缺点：\n\n  1. 代码改动量大：当然如果一开始就使用的话，也是很简单的\n  2. 增加了一次服务调用\n\n目前公司在使用的是redis中的session共享，使用redis的好处是速度快而且支持持久化。","source":"_posts/session共享解决方案.md","raw":"---\ntitle: session共享解决方案\ndate: 2017-10-09 15:41:36\ntags: [一致性,分布式,session共享]\ncategory: 分布式\n---\n\n用户通过浏览器访问服务器的时候，服务器会自动产生session，用来存放用户信息，登录信息等内容，在分布式的系统中，如何保证session的一致性呢？\n\n- 方法一：session同步\n\n  这个很好解释，也就是每新生成一个session，我们都把他同步到所有的服务器上面，这样每台服务器都有所有用户的session了，这是一种解决方法\n\n  优点：实现思路简单\n\n  缺点：\n\n  1. 占用带宽，也就是每次都要去同步session，当服务器多的时候情况会很明显\n  2. 占用内存，每台服务器都要存储所有的session，当session多的时候情况会很明显\n\n- 方法二：客户端存储\n\n  用客户端来存放用户信息，登录信息等内容，下次请求的时候携带过来就行了，也是一种实现方法\n\n  优点：服务端不用存储\n\n  缺点：\n\n  1. 安全性下降：cookie容易被窃取\n  2. 存储数据量小，不同浏览器允许的cookie大小有限。\n\n- 方法三：一致性hash\n\n  使用一致性hash算法计算出每个session存放的服务器，例如使用IP来做一致性hash，那么这个IP对应的session存放在哪一台服务器就确定了\n\n  优点：\n\n  1. 工作量小，不需要更改代码，只要配置nginx就可以了\n  2. 支持水平扩展\n\n  缺点：\n\n  1. 当新水平扩展的时候，要从新计算hash值，用户需要重新登录\n  2. 服务器重启，数据丢失\n\n- 方法四：后台统一存储\n\n  把session存放到数据库或缓存中\n\n  优点：\n\n  1. 安全性高：即便重启了数据依然存在\n  2. 水平扩展：因为session是单独存储的，所以不影响水平扩展\n\n  缺点：\n\n  1. 代码改动量大：当然如果一开始就使用的话，也是很简单的\n  2. 增加了一次服务调用\n\n目前公司在使用的是redis中的session共享，使用redis的好处是速度快而且支持持久化。","slug":"session共享解决方案","published":1,"updated":"2018-09-13T08:20:49.576Z","_id":"cjm0akt2y00063gvwsup8d35i","comments":1,"layout":"post","photos":[],"link":"","content":"<p>用户通过浏览器访问服务器的时候，服务器会自动产生session，用来存放用户信息，登录信息等内容，在分布式的系统中，如何保证session的一致性呢？</p>\n<ul>\n<li><p>方法一：session同步</p>\n<p>这个很好解释，也就是每新生成一个session，我们都把他同步到所有的服务器上面，这样每台服务器都有所有用户的session了，这是一种解决方法</p>\n<p>优点：实现思路简单</p>\n<p>缺点：</p>\n<ol>\n<li>占用带宽，也就是每次都要去同步session，当服务器多的时候情况会很明显</li>\n<li>占用内存，每台服务器都要存储所有的session，当session多的时候情况会很明显</li>\n</ol>\n</li>\n<li><p>方法二：客户端存储</p>\n<p>用客户端来存放用户信息，登录信息等内容，下次请求的时候携带过来就行了，也是一种实现方法</p>\n<p>优点：服务端不用存储</p>\n<p>缺点：</p>\n<ol>\n<li>安全性下降：cookie容易被窃取</li>\n<li>存储数据量小，不同浏览器允许的cookie大小有限。</li>\n</ol>\n</li>\n<li><p>方法三：一致性hash</p>\n<p>使用一致性hash算法计算出每个session存放的服务器，例如使用IP来做一致性hash，那么这个IP对应的session存放在哪一台服务器就确定了</p>\n<p>优点：</p>\n<ol>\n<li>工作量小，不需要更改代码，只要配置nginx就可以了</li>\n<li>支持水平扩展</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>当新水平扩展的时候，要从新计算hash值，用户需要重新登录</li>\n<li>服务器重启，数据丢失</li>\n</ol>\n</li>\n<li><p>方法四：后台统一存储</p>\n<p>把session存放到数据库或缓存中</p>\n<p>优点：</p>\n<ol>\n<li>安全性高：即便重启了数据依然存在</li>\n<li>水平扩展：因为session是单独存储的，所以不影响水平扩展</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>代码改动量大：当然如果一开始就使用的话，也是很简单的</li>\n<li>增加了一次服务调用</li>\n</ol>\n</li>\n</ul>\n<p>目前公司在使用的是redis中的session共享，使用redis的好处是速度快而且支持持久化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>用户通过浏览器访问服务器的时候，服务器会自动产生session，用来存放用户信息，登录信息等内容，在分布式的系统中，如何保证session的一致性呢？</p>\n<ul>\n<li><p>方法一：session同步</p>\n<p>这个很好解释，也就是每新生成一个session，我们都把他同步到所有的服务器上面，这样每台服务器都有所有用户的session了，这是一种解决方法</p>\n<p>优点：实现思路简单</p>\n<p>缺点：</p>\n<ol>\n<li>占用带宽，也就是每次都要去同步session，当服务器多的时候情况会很明显</li>\n<li>占用内存，每台服务器都要存储所有的session，当session多的时候情况会很明显</li>\n</ol>\n</li>\n<li><p>方法二：客户端存储</p>\n<p>用客户端来存放用户信息，登录信息等内容，下次请求的时候携带过来就行了，也是一种实现方法</p>\n<p>优点：服务端不用存储</p>\n<p>缺点：</p>\n<ol>\n<li>安全性下降：cookie容易被窃取</li>\n<li>存储数据量小，不同浏览器允许的cookie大小有限。</li>\n</ol>\n</li>\n<li><p>方法三：一致性hash</p>\n<p>使用一致性hash算法计算出每个session存放的服务器，例如使用IP来做一致性hash，那么这个IP对应的session存放在哪一台服务器就确定了</p>\n<p>优点：</p>\n<ol>\n<li>工作量小，不需要更改代码，只要配置nginx就可以了</li>\n<li>支持水平扩展</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>当新水平扩展的时候，要从新计算hash值，用户需要重新登录</li>\n<li>服务器重启，数据丢失</li>\n</ol>\n</li>\n<li><p>方法四：后台统一存储</p>\n<p>把session存放到数据库或缓存中</p>\n<p>优点：</p>\n<ol>\n<li>安全性高：即便重启了数据依然存在</li>\n<li>水平扩展：因为session是单独存储的，所以不影响水平扩展</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>代码改动量大：当然如果一开始就使用的话，也是很简单的</li>\n<li>增加了一次服务调用</li>\n</ol>\n</li>\n</ul>\n<p>目前公司在使用的是redis中的session共享，使用redis的好处是速度快而且支持持久化。</p>\n"},{"title":"拜占庭容错算法（PBFT）","date":"2017-09-09T07:41:46.000Z","_content":"\n拜占庭将军问题反映到现实情况就是：在一个不可靠的信道上，如何保证信息传递的一致性。\n\n解决方法：拜占庭容错算法（PBFT），分为三个阶段：预准备（pre-prepare）、准备（prepare）、确认（commit）\n\n{% asset_img 1.jpg 流程图 %}\n\n从图中可以看到C发出一个请求，四个信道中3号信道是有问题的。\n\n第一步：C发出请求，到了0（可以是任意信道）\n\n第二步：0在预准备阶段广播到所有节点，其中3有故障未到达\n\n第三步：准备阶段，如果收到的请求超过一定数量，发出广播\n\n第四部：确认阶段，如果收到的请求超过一定数量，对C进行反馈\n\n在N >= 3F + 1的情况下一致性是可以用这种方法解决的，N是总计算机数，F是有问题的计算机数\n\n{% asset_img 2.png %}\n\n可以看出在错误节点小于1/3的时候，这种方法时可行的。央行使用的就是PBFT。","source":"_posts/拜占庭容错算法（PBFT）.md","raw":"---\ntitle: 拜占庭容错算法（PBFT）\ndate: 2017-09-09 15:41:46\ntags: [一致性,算法,区块链]\ncategory: 算法\n---\n\n拜占庭将军问题反映到现实情况就是：在一个不可靠的信道上，如何保证信息传递的一致性。\n\n解决方法：拜占庭容错算法（PBFT），分为三个阶段：预准备（pre-prepare）、准备（prepare）、确认（commit）\n\n{% asset_img 1.jpg 流程图 %}\n\n从图中可以看到C发出一个请求，四个信道中3号信道是有问题的。\n\n第一步：C发出请求，到了0（可以是任意信道）\n\n第二步：0在预准备阶段广播到所有节点，其中3有故障未到达\n\n第三步：准备阶段，如果收到的请求超过一定数量，发出广播\n\n第四部：确认阶段，如果收到的请求超过一定数量，对C进行反馈\n\n在N >= 3F + 1的情况下一致性是可以用这种方法解决的，N是总计算机数，F是有问题的计算机数\n\n{% asset_img 2.png %}\n\n可以看出在错误节点小于1/3的时候，这种方法时可行的。央行使用的就是PBFT。","slug":"拜占庭容错算法（PBFT）","published":1,"updated":"2018-09-13T08:23:04.506Z","_id":"cjm0akt3000093gvwo0zti81v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>拜占庭将军问题反映到现实情况就是：在一个不可靠的信道上，如何保证信息传递的一致性。</p>\n<p>解决方法：拜占庭容错算法（PBFT），分为三个阶段：预准备（pre-prepare）、准备（prepare）、确认（commit）</p>\n<img src=\"/2017/09/09/拜占庭容错算法（PBFT）/1.jpg\" title=\"流程图\">\n<p>从图中可以看到C发出一个请求，四个信道中3号信道是有问题的。</p>\n<p>第一步：C发出请求，到了0（可以是任意信道）</p>\n<p>第二步：0在预准备阶段广播到所有节点，其中3有故障未到达</p>\n<p>第三步：准备阶段，如果收到的请求超过一定数量，发出广播</p>\n<p>第四部：确认阶段，如果收到的请求超过一定数量，对C进行反馈</p>\n<p>在N &gt;= 3F + 1的情况下一致性是可以用这种方法解决的，N是总计算机数，F是有问题的计算机数</p>\n<img src=\"/2017/09/09/拜占庭容错算法（PBFT）/2.png\">\n<p>可以看出在错误节点小于1/3的时候，这种方法时可行的。央行使用的就是PBFT。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>拜占庭将军问题反映到现实情况就是：在一个不可靠的信道上，如何保证信息传递的一致性。</p>\n<p>解决方法：拜占庭容错算法（PBFT），分为三个阶段：预准备（pre-prepare）、准备（prepare）、确认（commit）</p>\n<img src=\"/2017/09/09/拜占庭容错算法（PBFT）/1.jpg\" title=\"流程图\">\n<p>从图中可以看到C发出一个请求，四个信道中3号信道是有问题的。</p>\n<p>第一步：C发出请求，到了0（可以是任意信道）</p>\n<p>第二步：0在预准备阶段广播到所有节点，其中3有故障未到达</p>\n<p>第三步：准备阶段，如果收到的请求超过一定数量，发出广播</p>\n<p>第四部：确认阶段，如果收到的请求超过一定数量，对C进行反馈</p>\n<p>在N &gt;= 3F + 1的情况下一致性是可以用这种方法解决的，N是总计算机数，F是有问题的计算机数</p>\n<img src=\"/2017/09/09/拜占庭容错算法（PBFT）/2.png\">\n<p>可以看出在错误节点小于1/3的时候，这种方法时可行的。央行使用的就是PBFT。</p>\n"},{"title":"数据库索引之BTree","date":"2018-03-29T07:40:44.000Z","_content":"\n我们看一些数据库索引文章的时候，避免不了会看到B-Tree或者B+Tree，那么什么是B-Tree呢？为什么数据库普遍喜欢这个数据结构呢？下面就从这两点说起\n\n###### 什么是B-Tree\n\nB树最早接触时在严蔚敏的数据结构中了解到的，那么我们根据一张图来看看她给出的定义\n\n{% asset_img 1.png %}\n\n{% asset_img 3.png %}  \n\n从特性中我们看到：\n\n> 1. B树是一个多叉树，而且是平衡树，关键字存放在整颗树中，性能等价于二分查找。\n> 2. 因为每个节点至少有M／2个儿子，所以可以保证树的深度不会过深，但是新增节点和删除节点也要保证这个特性，所以会出现节点的分裂与合并。\n\n其实B+树的出现正是应文件系统所需才出现的一种数据结构，他是B树的变种，他的定义和B树有区别也有联系：\n\n{% asset_img 2.png %}  \n\n> 1. 有n颗子树的节点中含有n个关键字；\n> 2. 所有叶子节点中包含了全部关键字信息，及指向含有这些关键字记录的指针，且叶子节点本身依关键字的大小从小到大顺序连接；\n> 3. 所有的非终端节点可看成是索引部分，节点中仅含有其子树（根节点）中的最大或最小关键字；\n\n###### 数据库为什么要用B树\n\n其实数据库不用索引也是可以的，但是索引是为了加快查询，这在OLADP（线上分析处理）的时候是很重要的。而索引其实就是一种数据结构，有hash索引，全文索引，B+Tree索引，其实就是不同的数据结构，我们现在只谈论为什么用BTree。在之前我们先学习两个东西：\n\n1. 局部性原理：当一个数据被用到时，其附近的数据通常也会马上被用到\n2. 磁盘预读：即使使用了磁盘页中的一部分数据，磁盘也会把整个页读取给内存\n\n随着内存越来越大，很多时候我们都会做缓存，其实预读也是缓存。由于内存和磁盘的IO速度根本不在一个量级，在加上局部性原理，我们一般会按页读取（通常一页为4K）。数据库设计者把索引的每个节点都设计成一页，而且出度设置很大，这样就减少了深度，建设深度为d，那么一次查询最多进行d-1次IO就行了。\n\n","source":"_posts/数据库索引之BTree.md","raw":"---\ntitle: 数据库索引之BTree\ndate: 2018-03-29 15:40:44\ntags: [数据库,底层原理,数据结构]\ncategory: 数据库\n---\n\n我们看一些数据库索引文章的时候，避免不了会看到B-Tree或者B+Tree，那么什么是B-Tree呢？为什么数据库普遍喜欢这个数据结构呢？下面就从这两点说起\n\n###### 什么是B-Tree\n\nB树最早接触时在严蔚敏的数据结构中了解到的，那么我们根据一张图来看看她给出的定义\n\n{% asset_img 1.png %}\n\n{% asset_img 3.png %}  \n\n从特性中我们看到：\n\n> 1. B树是一个多叉树，而且是平衡树，关键字存放在整颗树中，性能等价于二分查找。\n> 2. 因为每个节点至少有M／2个儿子，所以可以保证树的深度不会过深，但是新增节点和删除节点也要保证这个特性，所以会出现节点的分裂与合并。\n\n其实B+树的出现正是应文件系统所需才出现的一种数据结构，他是B树的变种，他的定义和B树有区别也有联系：\n\n{% asset_img 2.png %}  \n\n> 1. 有n颗子树的节点中含有n个关键字；\n> 2. 所有叶子节点中包含了全部关键字信息，及指向含有这些关键字记录的指针，且叶子节点本身依关键字的大小从小到大顺序连接；\n> 3. 所有的非终端节点可看成是索引部分，节点中仅含有其子树（根节点）中的最大或最小关键字；\n\n###### 数据库为什么要用B树\n\n其实数据库不用索引也是可以的，但是索引是为了加快查询，这在OLADP（线上分析处理）的时候是很重要的。而索引其实就是一种数据结构，有hash索引，全文索引，B+Tree索引，其实就是不同的数据结构，我们现在只谈论为什么用BTree。在之前我们先学习两个东西：\n\n1. 局部性原理：当一个数据被用到时，其附近的数据通常也会马上被用到\n2. 磁盘预读：即使使用了磁盘页中的一部分数据，磁盘也会把整个页读取给内存\n\n随着内存越来越大，很多时候我们都会做缓存，其实预读也是缓存。由于内存和磁盘的IO速度根本不在一个量级，在加上局部性原理，我们一般会按页读取（通常一页为4K）。数据库设计者把索引的每个节点都设计成一页，而且出度设置很大，这样就减少了深度，建设深度为d，那么一次查询最多进行d-1次IO就行了。\n\n","slug":"数据库索引之BTree","published":1,"updated":"2018-09-13T07:48:27.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm0akt31000a3gvwjvcjhaba","content":"<p>我们看一些数据库索引文章的时候，避免不了会看到B-Tree或者B+Tree，那么什么是B-Tree呢？为什么数据库普遍喜欢这个数据结构呢？下面就从这两点说起</p>\n<h6 id=\"什么是B-Tree\"><a href=\"#什么是B-Tree\" class=\"headerlink\" title=\"什么是B-Tree\"></a>什么是B-Tree</h6><p>B树最早接触时在严蔚敏的数据结构中了解到的，那么我们根据一张图来看看她给出的定义</p>\n<img src=\"/2018/03/29/数据库索引之BTree/1.png\">\n<img src=\"/2018/03/29/数据库索引之BTree/3.png\">  \n<p>从特性中我们看到：</p>\n<blockquote>\n<ol>\n<li>B树是一个多叉树，而且是平衡树，关键字存放在整颗树中，性能等价于二分查找。</li>\n<li>因为每个节点至少有M／2个儿子，所以可以保证树的深度不会过深，但是新增节点和删除节点也要保证这个特性，所以会出现节点的分裂与合并。</li>\n</ol>\n</blockquote>\n<p>其实B+树的出现正是应文件系统所需才出现的一种数据结构，他是B树的变种，他的定义和B树有区别也有联系：</p>\n<img src=\"/2018/03/29/数据库索引之BTree/2.png\">  \n<blockquote>\n<ol>\n<li>有n颗子树的节点中含有n个关键字；</li>\n<li>所有叶子节点中包含了全部关键字信息，及指向含有这些关键字记录的指针，且叶子节点本身依关键字的大小从小到大顺序连接；</li>\n<li>所有的非终端节点可看成是索引部分，节点中仅含有其子树（根节点）中的最大或最小关键字；</li>\n</ol>\n</blockquote>\n<h6 id=\"数据库为什么要用B树\"><a href=\"#数据库为什么要用B树\" class=\"headerlink\" title=\"数据库为什么要用B树\"></a>数据库为什么要用B树</h6><p>其实数据库不用索引也是可以的，但是索引是为了加快查询，这在OLADP（线上分析处理）的时候是很重要的。而索引其实就是一种数据结构，有hash索引，全文索引，B+Tree索引，其实就是不同的数据结构，我们现在只谈论为什么用BTree。在之前我们先学习两个东西：</p>\n<ol>\n<li>局部性原理：当一个数据被用到时，其附近的数据通常也会马上被用到</li>\n<li>磁盘预读：即使使用了磁盘页中的一部分数据，磁盘也会把整个页读取给内存</li>\n</ol>\n<p>随着内存越来越大，很多时候我们都会做缓存，其实预读也是缓存。由于内存和磁盘的IO速度根本不在一个量级，在加上局部性原理，我们一般会按页读取（通常一页为4K）。数据库设计者把索引的每个节点都设计成一页，而且出度设置很大，这样就减少了深度，建设深度为d，那么一次查询最多进行d-1次IO就行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们看一些数据库索引文章的时候，避免不了会看到B-Tree或者B+Tree，那么什么是B-Tree呢？为什么数据库普遍喜欢这个数据结构呢？下面就从这两点说起</p>\n<h6 id=\"什么是B-Tree\"><a href=\"#什么是B-Tree\" class=\"headerlink\" title=\"什么是B-Tree\"></a>什么是B-Tree</h6><p>B树最早接触时在严蔚敏的数据结构中了解到的，那么我们根据一张图来看看她给出的定义</p>\n<img src=\"/2018/03/29/数据库索引之BTree/1.png\">\n<img src=\"/2018/03/29/数据库索引之BTree/3.png\">  \n<p>从特性中我们看到：</p>\n<blockquote>\n<ol>\n<li>B树是一个多叉树，而且是平衡树，关键字存放在整颗树中，性能等价于二分查找。</li>\n<li>因为每个节点至少有M／2个儿子，所以可以保证树的深度不会过深，但是新增节点和删除节点也要保证这个特性，所以会出现节点的分裂与合并。</li>\n</ol>\n</blockquote>\n<p>其实B+树的出现正是应文件系统所需才出现的一种数据结构，他是B树的变种，他的定义和B树有区别也有联系：</p>\n<img src=\"/2018/03/29/数据库索引之BTree/2.png\">  \n<blockquote>\n<ol>\n<li>有n颗子树的节点中含有n个关键字；</li>\n<li>所有叶子节点中包含了全部关键字信息，及指向含有这些关键字记录的指针，且叶子节点本身依关键字的大小从小到大顺序连接；</li>\n<li>所有的非终端节点可看成是索引部分，节点中仅含有其子树（根节点）中的最大或最小关键字；</li>\n</ol>\n</blockquote>\n<h6 id=\"数据库为什么要用B树\"><a href=\"#数据库为什么要用B树\" class=\"headerlink\" title=\"数据库为什么要用B树\"></a>数据库为什么要用B树</h6><p>其实数据库不用索引也是可以的，但是索引是为了加快查询，这在OLADP（线上分析处理）的时候是很重要的。而索引其实就是一种数据结构，有hash索引，全文索引，B+Tree索引，其实就是不同的数据结构，我们现在只谈论为什么用BTree。在之前我们先学习两个东西：</p>\n<ol>\n<li>局部性原理：当一个数据被用到时，其附近的数据通常也会马上被用到</li>\n<li>磁盘预读：即使使用了磁盘页中的一部分数据，磁盘也会把整个页读取给内存</li>\n</ol>\n<p>随着内存越来越大，很多时候我们都会做缓存，其实预读也是缓存。由于内存和磁盘的IO速度根本不在一个量级，在加上局部性原理，我们一般会按页读取（通常一页为4K）。数据库设计者把索引的每个节点都设计成一页，而且出度设置很大，这样就减少了深度，建设深度为d，那么一次查询最多进行d-1次IO就行了。</p>\n"},{"title":"树莓派3B-DHT11-Yeelink云平台（实现温湿度远程监控）","date":"2015-07-09T02:37:46.000Z","_content":"因为毕业设计选了个让自己一脸懵逼的题目，听同学说树莓派实现比较简单，所以我就花了4百大洋买了一个3B的板子和一个树莓派原装的摄像头（一百五左右，最后发现网上资料太少了!😭，而且只是搞下毕业设计，就不打算深究了，网上找个例子实现功能就可以了，不过拍的确实清晰）。好了，下面就说下怎么实现云平台实时监控温湿度把。其中有投机取巧的部分。其实我说的所有都只是一种方法，大家可以去尝试别的，下面就不赘述了，直接写过程。\n\n- 装系统\n\n装系统的话，直接去官网下载就行，毕竟用的树莓派，我就下了raspbian，带桌面（毕竟小白）这是下载链接https://downloads.raspberrypi.org/raspbian_latest\n\n同时需要一个写入工具，我当时应该不是在官网下的，这是链接，速度挺快，下载完解压就行http://124.202.164.7/files/4125000005975BAB/vzidc.newhua.com/down/Win32DiskImager-0.9.5-binary.zip\n\n然后需要一张4g以上的sd卡，反正我用的8g，我用的就是很早以前手机里的内存卡，同时需要一个读卡器，打开读写工具，然后把解压后的img系统文件写入到内存卡，就可以了\n\n- 登录树莓派\n\n第一次登录用ssh工具，首先你需要知道局域网给你的树莓派分配的IP地址，可以使用一个端口扫描工具，看看哪儿22端口是开放的，然后xshell链接\n\n- 显示图形界面\n\n我也不先配置别的了，先让大家看看图形界面吧，上vncviewer下载客户端，然后在xshell输入sudo apt-get install tightvncserver然后等读码完成，然后输入vncserver，接下来它让你设置密码，我设置12345678，然后确认再输入一次，接着打开vncviewer，在地址栏输入树莓派ip:1回车，然后输入12345678，回车就可以看到图形界面了\n\n- 树莓派连接上无线网路\n\n因为树莓派没有自带vim，所以我就先安装了vim，命令式sudo apt-get install vim\n\n然后sudo vim /etc/network/interfaces 然后修改成下列样式\n\n    auto lo\n    iface loinet loopback\n    ifaceeth0 inet dhcp\n    autowlan0\n    allow-hotplugwlan0\n    ifacewlan0 inet dhcp\n          wpa-ssid 要连入的WiFi名\n          wpa-psk WiFi密码\n\n然后sudo /etc/init.d/networking restart 但是这时候会分配一个新的ip，然后xshell创建一个新的连接就行了\n\n修改配置\n\n这是树莓派3B的界面，别的修改项含义可以参考\n\nhttp://blog.csdn.net/xdw1985829/article/details/38816375\n\n，我修改了第一项，让文件系统覆盖整个sd卡，同时修改了时区，如果不修改时区的话，接下来上传的数据时间不正确\n\n安装WiringPi\n\nsudo apt-get install wiringPi 安装完可以测试一下gpio readall然后会显示一些东西就证明可以了\n\n接下来就是程序和怎么连接到yeelink上了\n\n下载我整理好的程序，test.c是源文件可以使用gcc编译一下，编译命令式gcc –Wall –o 输出的文件名  编译的文件名 –lwiringPi 然后生成一个你要生成的文件名\n\n接下来修改shell脚本,Yeelink教程网上很多，我就不介绍了，得到两个传感器的URL就行，还有你的API key，替换成你的API key和URL，同时还有你编译.c生成的文件的路径\n\n这是我写的，有点投机取巧✌️，勉强能用。\n\n链接：http://pan.baidu.com/s/1nuXLmAl 密码：yjvq\n","source":"_posts/树莓派3B-DHT11-Yeelink云平台（实现温湿度远程监控）.md","raw":"---\ntitle: 树莓派3B-DHT11-Yeelink云平台（实现温湿度远程监控）\ndate: 2015-07-09 10:37:46\ntags: [树莓派,温湿度传感器,毕业设计]\ncategory: [嵌入式]\n---\n因为毕业设计选了个让自己一脸懵逼的题目，听同学说树莓派实现比较简单，所以我就花了4百大洋买了一个3B的板子和一个树莓派原装的摄像头（一百五左右，最后发现网上资料太少了!😭，而且只是搞下毕业设计，就不打算深究了，网上找个例子实现功能就可以了，不过拍的确实清晰）。好了，下面就说下怎么实现云平台实时监控温湿度把。其中有投机取巧的部分。其实我说的所有都只是一种方法，大家可以去尝试别的，下面就不赘述了，直接写过程。\n\n- 装系统\n\n装系统的话，直接去官网下载就行，毕竟用的树莓派，我就下了raspbian，带桌面（毕竟小白）这是下载链接https://downloads.raspberrypi.org/raspbian_latest\n\n同时需要一个写入工具，我当时应该不是在官网下的，这是链接，速度挺快，下载完解压就行http://124.202.164.7/files/4125000005975BAB/vzidc.newhua.com/down/Win32DiskImager-0.9.5-binary.zip\n\n然后需要一张4g以上的sd卡，反正我用的8g，我用的就是很早以前手机里的内存卡，同时需要一个读卡器，打开读写工具，然后把解压后的img系统文件写入到内存卡，就可以了\n\n- 登录树莓派\n\n第一次登录用ssh工具，首先你需要知道局域网给你的树莓派分配的IP地址，可以使用一个端口扫描工具，看看哪儿22端口是开放的，然后xshell链接\n\n- 显示图形界面\n\n我也不先配置别的了，先让大家看看图形界面吧，上vncviewer下载客户端，然后在xshell输入sudo apt-get install tightvncserver然后等读码完成，然后输入vncserver，接下来它让你设置密码，我设置12345678，然后确认再输入一次，接着打开vncviewer，在地址栏输入树莓派ip:1回车，然后输入12345678，回车就可以看到图形界面了\n\n- 树莓派连接上无线网路\n\n因为树莓派没有自带vim，所以我就先安装了vim，命令式sudo apt-get install vim\n\n然后sudo vim /etc/network/interfaces 然后修改成下列样式\n\n    auto lo\n    iface loinet loopback\n    ifaceeth0 inet dhcp\n    autowlan0\n    allow-hotplugwlan0\n    ifacewlan0 inet dhcp\n          wpa-ssid 要连入的WiFi名\n          wpa-psk WiFi密码\n\n然后sudo /etc/init.d/networking restart 但是这时候会分配一个新的ip，然后xshell创建一个新的连接就行了\n\n修改配置\n\n这是树莓派3B的界面，别的修改项含义可以参考\n\nhttp://blog.csdn.net/xdw1985829/article/details/38816375\n\n，我修改了第一项，让文件系统覆盖整个sd卡，同时修改了时区，如果不修改时区的话，接下来上传的数据时间不正确\n\n安装WiringPi\n\nsudo apt-get install wiringPi 安装完可以测试一下gpio readall然后会显示一些东西就证明可以了\n\n接下来就是程序和怎么连接到yeelink上了\n\n下载我整理好的程序，test.c是源文件可以使用gcc编译一下，编译命令式gcc –Wall –o 输出的文件名  编译的文件名 –lwiringPi 然后生成一个你要生成的文件名\n\n接下来修改shell脚本,Yeelink教程网上很多，我就不介绍了，得到两个传感器的URL就行，还有你的API key，替换成你的API key和URL，同时还有你编译.c生成的文件的路径\n\n这是我写的，有点投机取巧✌️，勉强能用。\n\n链接：http://pan.baidu.com/s/1nuXLmAl 密码：yjvq\n","slug":"树莓派3B-DHT11-Yeelink云平台（实现温湿度远程监控）","published":1,"updated":"2018-09-13T06:40:39.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjm0akt34000d3gvw7m0yq11a","content":"<p>因为毕业设计选了个让自己一脸懵逼的题目，听同学说树莓派实现比较简单，所以我就花了4百大洋买了一个3B的板子和一个树莓派原装的摄像头（一百五左右，最后发现网上资料太少了!😭，而且只是搞下毕业设计，就不打算深究了，网上找个例子实现功能就可以了，不过拍的确实清晰）。好了，下面就说下怎么实现云平台实时监控温湿度把。其中有投机取巧的部分。其实我说的所有都只是一种方法，大家可以去尝试别的，下面就不赘述了，直接写过程。</p>\n<ul>\n<li>装系统</li>\n</ul>\n<p>装系统的话，直接去官网下载就行，毕竟用的树莓派，我就下了raspbian，带桌面（毕竟小白）这是下载链接<a href=\"https://downloads.raspberrypi.org/raspbian_latest\" target=\"_blank\" rel=\"noopener\">https://downloads.raspberrypi.org/raspbian_latest</a></p>\n<p>同时需要一个写入工具，我当时应该不是在官网下的，这是链接，速度挺快，下载完解压就行<a href=\"http://124.202.164.7/files/4125000005975BAB/vzidc.newhua.com/down/Win32DiskImager-0.9.5-binary.zip\" target=\"_blank\" rel=\"noopener\">http://124.202.164.7/files/4125000005975BAB/vzidc.newhua.com/down/Win32DiskImager-0.9.5-binary.zip</a></p>\n<p>然后需要一张4g以上的sd卡，反正我用的8g，我用的就是很早以前手机里的内存卡，同时需要一个读卡器，打开读写工具，然后把解压后的img系统文件写入到内存卡，就可以了</p>\n<ul>\n<li>登录树莓派</li>\n</ul>\n<p>第一次登录用ssh工具，首先你需要知道局域网给你的树莓派分配的IP地址，可以使用一个端口扫描工具，看看哪儿22端口是开放的，然后xshell链接</p>\n<ul>\n<li>显示图形界面</li>\n</ul>\n<p>我也不先配置别的了，先让大家看看图形界面吧，上vncviewer下载客户端，然后在xshell输入sudo apt-get install tightvncserver然后等读码完成，然后输入vncserver，接下来它让你设置密码，我设置12345678，然后确认再输入一次，接着打开vncviewer，在地址栏输入树莓派ip:1回车，然后输入12345678，回车就可以看到图形界面了</p>\n<ul>\n<li>树莓派连接上无线网路</li>\n</ul>\n<p>因为树莓派没有自带vim，所以我就先安装了vim，命令式sudo apt-get install vim</p>\n<p>然后sudo vim /etc/network/interfaces 然后修改成下列样式</p>\n<pre><code>auto lo\niface loinet loopback\nifaceeth0 inet dhcp\nautowlan0\nallow-hotplugwlan0\nifacewlan0 inet dhcp\n      wpa-ssid 要连入的WiFi名\n      wpa-psk WiFi密码\n</code></pre><p>然后sudo /etc/init.d/networking restart 但是这时候会分配一个新的ip，然后xshell创建一个新的连接就行了</p>\n<p>修改配置</p>\n<p>这是树莓派3B的界面，别的修改项含义可以参考</p>\n<p><a href=\"http://blog.csdn.net/xdw1985829/article/details/38816375\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xdw1985829/article/details/38816375</a></p>\n<p>，我修改了第一项，让文件系统覆盖整个sd卡，同时修改了时区，如果不修改时区的话，接下来上传的数据时间不正确</p>\n<p>安装WiringPi</p>\n<p>sudo apt-get install wiringPi 安装完可以测试一下gpio readall然后会显示一些东西就证明可以了</p>\n<p>接下来就是程序和怎么连接到yeelink上了</p>\n<p>下载我整理好的程序，test.c是源文件可以使用gcc编译一下，编译命令式gcc –Wall –o 输出的文件名  编译的文件名 –lwiringPi 然后生成一个你要生成的文件名</p>\n<p>接下来修改shell脚本,Yeelink教程网上很多，我就不介绍了，得到两个传感器的URL就行，还有你的API key，替换成你的API key和URL，同时还有你编译.c生成的文件的路径</p>\n<p>这是我写的，有点投机取巧✌️，勉强能用。</p>\n<p>链接：<a href=\"http://pan.baidu.com/s/1nuXLmAl\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1nuXLmAl</a> 密码：yjvq</p>\n","site":{"data":{}},"excerpt":"","more":"<p>因为毕业设计选了个让自己一脸懵逼的题目，听同学说树莓派实现比较简单，所以我就花了4百大洋买了一个3B的板子和一个树莓派原装的摄像头（一百五左右，最后发现网上资料太少了!😭，而且只是搞下毕业设计，就不打算深究了，网上找个例子实现功能就可以了，不过拍的确实清晰）。好了，下面就说下怎么实现云平台实时监控温湿度把。其中有投机取巧的部分。其实我说的所有都只是一种方法，大家可以去尝试别的，下面就不赘述了，直接写过程。</p>\n<ul>\n<li>装系统</li>\n</ul>\n<p>装系统的话，直接去官网下载就行，毕竟用的树莓派，我就下了raspbian，带桌面（毕竟小白）这是下载链接<a href=\"https://downloads.raspberrypi.org/raspbian_latest\" target=\"_blank\" rel=\"noopener\">https://downloads.raspberrypi.org/raspbian_latest</a></p>\n<p>同时需要一个写入工具，我当时应该不是在官网下的，这是链接，速度挺快，下载完解压就行<a href=\"http://124.202.164.7/files/4125000005975BAB/vzidc.newhua.com/down/Win32DiskImager-0.9.5-binary.zip\" target=\"_blank\" rel=\"noopener\">http://124.202.164.7/files/4125000005975BAB/vzidc.newhua.com/down/Win32DiskImager-0.9.5-binary.zip</a></p>\n<p>然后需要一张4g以上的sd卡，反正我用的8g，我用的就是很早以前手机里的内存卡，同时需要一个读卡器，打开读写工具，然后把解压后的img系统文件写入到内存卡，就可以了</p>\n<ul>\n<li>登录树莓派</li>\n</ul>\n<p>第一次登录用ssh工具，首先你需要知道局域网给你的树莓派分配的IP地址，可以使用一个端口扫描工具，看看哪儿22端口是开放的，然后xshell链接</p>\n<ul>\n<li>显示图形界面</li>\n</ul>\n<p>我也不先配置别的了，先让大家看看图形界面吧，上vncviewer下载客户端，然后在xshell输入sudo apt-get install tightvncserver然后等读码完成，然后输入vncserver，接下来它让你设置密码，我设置12345678，然后确认再输入一次，接着打开vncviewer，在地址栏输入树莓派ip:1回车，然后输入12345678，回车就可以看到图形界面了</p>\n<ul>\n<li>树莓派连接上无线网路</li>\n</ul>\n<p>因为树莓派没有自带vim，所以我就先安装了vim，命令式sudo apt-get install vim</p>\n<p>然后sudo vim /etc/network/interfaces 然后修改成下列样式</p>\n<pre><code>auto lo\niface loinet loopback\nifaceeth0 inet dhcp\nautowlan0\nallow-hotplugwlan0\nifacewlan0 inet dhcp\n      wpa-ssid 要连入的WiFi名\n      wpa-psk WiFi密码\n</code></pre><p>然后sudo /etc/init.d/networking restart 但是这时候会分配一个新的ip，然后xshell创建一个新的连接就行了</p>\n<p>修改配置</p>\n<p>这是树莓派3B的界面，别的修改项含义可以参考</p>\n<p><a href=\"http://blog.csdn.net/xdw1985829/article/details/38816375\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xdw1985829/article/details/38816375</a></p>\n<p>，我修改了第一项，让文件系统覆盖整个sd卡，同时修改了时区，如果不修改时区的话，接下来上传的数据时间不正确</p>\n<p>安装WiringPi</p>\n<p>sudo apt-get install wiringPi 安装完可以测试一下gpio readall然后会显示一些东西就证明可以了</p>\n<p>接下来就是程序和怎么连接到yeelink上了</p>\n<p>下载我整理好的程序，test.c是源文件可以使用gcc编译一下，编译命令式gcc –Wall –o 输出的文件名  编译的文件名 –lwiringPi 然后生成一个你要生成的文件名</p>\n<p>接下来修改shell脚本,Yeelink教程网上很多，我就不介绍了，得到两个传感器的URL就行，还有你的API key，替换成你的API key和URL，同时还有你编译.c生成的文件的路径</p>\n<p>这是我写的，有点投机取巧✌️，勉强能用。</p>\n<p>链接：<a href=\"http://pan.baidu.com/s/1nuXLmAl\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1nuXLmAl</a> 密码：yjvq</p>\n"},{"title":"自定义线程池（一）","date":"2017-12-09T07:41:19.000Z","_content":"\n在我们自定义线程池之前，先预备一点前置知识\n\n- 为什么要使用线程池？\n\n1. New Thread这种方式性能差\n2. 缺乏统一管理，循环创建会照成OOM\n3. 功能单一\n\n对应的就是线程池的优点，JAVA1.5出来的Concurrent包里面提供了四种创建线程池的方法，我们可以直接创建，但阿里Java开发手册有这么一条\n\n> 【强制】线程池不允许使用 Executors 去创建，而是通过ThreadPoolExecutor 的方式\n\n这样的好处就强制开发者去了解线程池的创建原理，从而避免资源耗尽的风险，而且Executors中四种线程池创建方式其实都依赖于ThreadPollExecutor这个类的构造。\n\n- 线程池概念\n\n{% asset_img 1.png 关系图 %}\n\n从图中可以看到各个类和接口的关系，同时可以看到Executors和其他类或接口没有什么直接关系，我们可以把他当成一个线程池工厂，用来创建四种线程池。\n\n\n\n先说下ThreadPoolExecutor\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n        int maximumPoolSize,\n        long keepAliveTime,\n        TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,\n        ThreadFactory threadFactory,\n        RejectedExecutionHandler handler)\n```\n\n> corePoolSize：核心线程数大小\n>\n> maximumPoolSize：线程池最大线程数\n>\n> keepAliveTime：当线程数大于核心时，清除空闲keepAliveTime时间的线程\n>\n> unit：时间单位\n>\n> workQueue：存储等待任务的队列\n>\n> threadFactory：线程工厂\n>\n> handler：拒绝策略\n\n刚创建的线程池是没有任何线程的，当过来一个任务，就启动一个线程去执行，再过来一个还创建一个新的线程，即便之前的已经空闲了，当线程池达到核心线程数的话，如果没有空闲线程，就把新加进来的任务放到阻塞队列，如果阻塞队列是有边界的话，到达边界以后就会去创建新的线程，接下来就会出现两种情况：\n\n1. 如果任务不再来了，那么就会把空闲keepAliveTime时间的线程给移除掉\n2. 如果任务接着来，并且已经达到了最大线程数，那么就要执行拒绝策略了\n\n其中等待队列有多种ArrayBlockingQueue，LinkedBlockingQueue，LinkedBlockingDeque，SynchronousQueue，根据具体情况而定。\n\n拒绝策略也有很多种\n\n1. AbortPolicy：丢弃任务并抛出RejectedExecutionException异常。 (默认)\n2. DiscardPolicy：也是丢弃任务，但是不抛出异常。\n3. DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n4. CallerRunsPolicy：由调用线程处理该任务\n\n- 四种创建线程池的方法\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n\treturn new FinalizableDelegatedExecutorService\n    \t(new ThreadPoolExecutor(\n            \t1, 1,\n        \t\t0L, TimeUnit.MILLISECONDS,\n                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n> 创建一个单线程，你看名字里面都没有ThreadPool:smile:，如果这个线程死了，他会创建一个新的线程来替代。\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(\n                0, Integer.MAX_VALUE,\n                60L, TimeUnit.SECONDS,\n                new SynchronousQueue<Runnable>());\n}\n```\n\n> 这个线程的特点从等待队列就可以看出来，这个队列根本不存储数据，只是做一个通道，一边进一边出。最大线程数为Integer.MAX_VALUE,也就是过来一个任务我就创建一个线程，当线程数大于任务数的时候就去回收那些空闲超过60秒的线程。\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n\treturn new ThreadPoolExecutor(\n        \tnThreads, nThreads,\n    \t\t0L, TimeUnit.MILLISECONDS,\n            new LinkedBlockingQueue<Runnable>());\n}\n```\n\n> 这个线程池核心线程和最大线程数相等，也就是说，过来一个任务，就直接创建一个线程，等到了最大线程数，你看keepAliveTime为0，所以就是不管线程使用不适用都不回收，如果线程挂了的话会重新创建一个。为了不然频繁丢弃任务，这里使用了一个无界链表队列。\n\n```java\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n\tsuper(\n          corePoolSize, Integer.MAX_VALUE,\n          0, NANOSECONDS,\n    \t  new DelayedWorkQueue());\n}\n```\n\n> 这个线程池的特点从名字就可以看出来，定期线程池，也就是任务会定期执行，这个定期是在他调用schedule方法的时候，就像一个Timer定时器一样，而他的实现主要是靠DelayedWorkQueue这个延迟队列，他规定只有到达规定延迟时间以后才能获取里面的元素","source":"_posts/自定义线程池（一）.md","raw":"---\ntitle: 自定义线程池（一）\ndate: 2017-12-09 15:41:19\ntags: [java,多线程,线程池]\ncategory: java高级\n---\n\n在我们自定义线程池之前，先预备一点前置知识\n\n- 为什么要使用线程池？\n\n1. New Thread这种方式性能差\n2. 缺乏统一管理，循环创建会照成OOM\n3. 功能单一\n\n对应的就是线程池的优点，JAVA1.5出来的Concurrent包里面提供了四种创建线程池的方法，我们可以直接创建，但阿里Java开发手册有这么一条\n\n> 【强制】线程池不允许使用 Executors 去创建，而是通过ThreadPoolExecutor 的方式\n\n这样的好处就强制开发者去了解线程池的创建原理，从而避免资源耗尽的风险，而且Executors中四种线程池创建方式其实都依赖于ThreadPollExecutor这个类的构造。\n\n- 线程池概念\n\n{% asset_img 1.png 关系图 %}\n\n从图中可以看到各个类和接口的关系，同时可以看到Executors和其他类或接口没有什么直接关系，我们可以把他当成一个线程池工厂，用来创建四种线程池。\n\n\n\n先说下ThreadPoolExecutor\n\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n        int maximumPoolSize,\n        long keepAliveTime,\n        TimeUnit unit,\n        BlockingQueue<Runnable> workQueue,\n        ThreadFactory threadFactory,\n        RejectedExecutionHandler handler)\n```\n\n> corePoolSize：核心线程数大小\n>\n> maximumPoolSize：线程池最大线程数\n>\n> keepAliveTime：当线程数大于核心时，清除空闲keepAliveTime时间的线程\n>\n> unit：时间单位\n>\n> workQueue：存储等待任务的队列\n>\n> threadFactory：线程工厂\n>\n> handler：拒绝策略\n\n刚创建的线程池是没有任何线程的，当过来一个任务，就启动一个线程去执行，再过来一个还创建一个新的线程，即便之前的已经空闲了，当线程池达到核心线程数的话，如果没有空闲线程，就把新加进来的任务放到阻塞队列，如果阻塞队列是有边界的话，到达边界以后就会去创建新的线程，接下来就会出现两种情况：\n\n1. 如果任务不再来了，那么就会把空闲keepAliveTime时间的线程给移除掉\n2. 如果任务接着来，并且已经达到了最大线程数，那么就要执行拒绝策略了\n\n其中等待队列有多种ArrayBlockingQueue，LinkedBlockingQueue，LinkedBlockingDeque，SynchronousQueue，根据具体情况而定。\n\n拒绝策略也有很多种\n\n1. AbortPolicy：丢弃任务并抛出RejectedExecutionException异常。 (默认)\n2. DiscardPolicy：也是丢弃任务，但是不抛出异常。\n3. DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n4. CallerRunsPolicy：由调用线程处理该任务\n\n- 四种创建线程池的方法\n\n```java\npublic static ExecutorService newSingleThreadExecutor() {\n\treturn new FinalizableDelegatedExecutorService\n    \t(new ThreadPoolExecutor(\n            \t1, 1,\n        \t\t0L, TimeUnit.MILLISECONDS,\n                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n> 创建一个单线程，你看名字里面都没有ThreadPool:smile:，如果这个线程死了，他会创建一个新的线程来替代。\n\n```java\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(\n                0, Integer.MAX_VALUE,\n                60L, TimeUnit.SECONDS,\n                new SynchronousQueue<Runnable>());\n}\n```\n\n> 这个线程的特点从等待队列就可以看出来，这个队列根本不存储数据，只是做一个通道，一边进一边出。最大线程数为Integer.MAX_VALUE,也就是过来一个任务我就创建一个线程，当线程数大于任务数的时候就去回收那些空闲超过60秒的线程。\n\n```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n\treturn new ThreadPoolExecutor(\n        \tnThreads, nThreads,\n    \t\t0L, TimeUnit.MILLISECONDS,\n            new LinkedBlockingQueue<Runnable>());\n}\n```\n\n> 这个线程池核心线程和最大线程数相等，也就是说，过来一个任务，就直接创建一个线程，等到了最大线程数，你看keepAliveTime为0，所以就是不管线程使用不适用都不回收，如果线程挂了的话会重新创建一个。为了不然频繁丢弃任务，这里使用了一个无界链表队列。\n\n```java\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n\tsuper(\n          corePoolSize, Integer.MAX_VALUE,\n          0, NANOSECONDS,\n    \t  new DelayedWorkQueue());\n}\n```\n\n> 这个线程池的特点从名字就可以看出来，定期线程池，也就是任务会定期执行，这个定期是在他调用schedule方法的时候，就像一个Timer定时器一样，而他的实现主要是靠DelayedWorkQueue这个延迟队列，他规定只有到达规定延迟时间以后才能获取里面的元素","slug":"自定义线程池（一）","published":1,"updated":"2018-09-13T08:19:06.343Z","_id":"cjm0akt35000e3gvw7ur7oel6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在我们自定义线程池之前，先预备一点前置知识</p>\n<ul>\n<li>为什么要使用线程池？</li>\n</ul>\n<ol>\n<li>New Thread这种方式性能差</li>\n<li>缺乏统一管理，循环创建会照成OOM</li>\n<li>功能单一</li>\n</ol>\n<p>对应的就是线程池的优点，JAVA1.5出来的Concurrent包里面提供了四种创建线程池的方法，我们可以直接创建，但阿里Java开发手册有这么一条</p>\n<blockquote>\n<p>【强制】线程池不允许使用 Executors 去创建，而是通过ThreadPoolExecutor 的方式</p>\n</blockquote>\n<p>这样的好处就强制开发者去了解线程池的创建原理，从而避免资源耗尽的风险，而且Executors中四种线程池创建方式其实都依赖于ThreadPollExecutor这个类的构造。</p>\n<ul>\n<li>线程池概念</li>\n</ul>\n<img src=\"/2017/12/09/自定义线程池（一）/1.png\" title=\"关系图\">\n<p>从图中可以看到各个类和接口的关系，同时可以看到Executors和其他类或接口没有什么直接关系，我们可以把他当成一个线程池工厂，用来创建四种线程池。</p>\n<p>先说下ThreadPoolExecutor</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>corePoolSize：核心线程数大小</p>\n<p>maximumPoolSize：线程池最大线程数</p>\n<p>keepAliveTime：当线程数大于核心时，清除空闲keepAliveTime时间的线程</p>\n<p>unit：时间单位</p>\n<p>workQueue：存储等待任务的队列</p>\n<p>threadFactory：线程工厂</p>\n<p>handler：拒绝策略</p>\n</blockquote>\n<p>刚创建的线程池是没有任何线程的，当过来一个任务，就启动一个线程去执行，再过来一个还创建一个新的线程，即便之前的已经空闲了，当线程池达到核心线程数的话，如果没有空闲线程，就把新加进来的任务放到阻塞队列，如果阻塞队列是有边界的话，到达边界以后就会去创建新的线程，接下来就会出现两种情况：</p>\n<ol>\n<li>如果任务不再来了，那么就会把空闲keepAliveTime时间的线程给移除掉</li>\n<li>如果任务接着来，并且已经达到了最大线程数，那么就要执行拒绝策略了</li>\n</ol>\n<p>其中等待队列有多种ArrayBlockingQueue，LinkedBlockingQueue，LinkedBlockingDeque，SynchronousQueue，根据具体情况而定。</p>\n<p>拒绝策略也有很多种</p>\n<ol>\n<li>AbortPolicy：丢弃任务并抛出RejectedExecutionException异常。 (默认)</li>\n<li>DiscardPolicy：也是丢弃任务，但是不抛出异常。</li>\n<li>DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li>\n<li>CallerRunsPolicy：由调用线程处理该任务</li>\n</ol>\n<ul>\n<li>四种创建线程池的方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">    \t(<span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">            \t<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">        \t\t<span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>创建一个单线程，你看名字里面都没有ThreadPool:smile:，如果这个线程死了，他会创建一个新的线程来替代。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">                <span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个线程的特点从等待队列就可以看出来，这个队列根本不存储数据，只是做一个通道，一边进一边出。最大线程数为Integer.MAX_VALUE,也就是过来一个任务我就创建一个线程，当线程数大于任务数的时候就去回收那些空闲超过60秒的线程。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">        \tnThreads, nThreads,</span><br><span class=\"line\">    \t\t<span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个线程池核心线程和最大线程数相等，也就是说，过来一个任务，就直接创建一个线程，等到了最大线程数，你看keepAliveTime为0，所以就是不管线程使用不适用都不回收，如果线程挂了的话会重新创建一个。为了不然频繁丢弃任务，这里使用了一个无界链表队列。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(</span><br><span class=\"line\">          corePoolSize, Integer.MAX_VALUE,</span><br><span class=\"line\">          <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">    \t  <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个线程池的特点从名字就可以看出来，定期线程池，也就是任务会定期执行，这个定期是在他调用schedule方法的时候，就像一个Timer定时器一样，而他的实现主要是靠DelayedWorkQueue这个延迟队列，他规定只有到达规定延迟时间以后才能获取里面的元素</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在我们自定义线程池之前，先预备一点前置知识</p>\n<ul>\n<li>为什么要使用线程池？</li>\n</ul>\n<ol>\n<li>New Thread这种方式性能差</li>\n<li>缺乏统一管理，循环创建会照成OOM</li>\n<li>功能单一</li>\n</ol>\n<p>对应的就是线程池的优点，JAVA1.5出来的Concurrent包里面提供了四种创建线程池的方法，我们可以直接创建，但阿里Java开发手册有这么一条</p>\n<blockquote>\n<p>【强制】线程池不允许使用 Executors 去创建，而是通过ThreadPoolExecutor 的方式</p>\n</blockquote>\n<p>这样的好处就强制开发者去了解线程池的创建原理，从而避免资源耗尽的风险，而且Executors中四种线程池创建方式其实都依赖于ThreadPollExecutor这个类的构造。</p>\n<ul>\n<li>线程池概念</li>\n</ul>\n<img src=\"/2017/12/09/自定义线程池（一）/1.png\" title=\"关系图\">\n<p>从图中可以看到各个类和接口的关系，同时可以看到Executors和其他类或接口没有什么直接关系，我们可以把他当成一个线程池工厂，用来创建四种线程池。</p>\n<p>先说下ThreadPoolExecutor</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>corePoolSize：核心线程数大小</p>\n<p>maximumPoolSize：线程池最大线程数</p>\n<p>keepAliveTime：当线程数大于核心时，清除空闲keepAliveTime时间的线程</p>\n<p>unit：时间单位</p>\n<p>workQueue：存储等待任务的队列</p>\n<p>threadFactory：线程工厂</p>\n<p>handler：拒绝策略</p>\n</blockquote>\n<p>刚创建的线程池是没有任何线程的，当过来一个任务，就启动一个线程去执行，再过来一个还创建一个新的线程，即便之前的已经空闲了，当线程池达到核心线程数的话，如果没有空闲线程，就把新加进来的任务放到阻塞队列，如果阻塞队列是有边界的话，到达边界以后就会去创建新的线程，接下来就会出现两种情况：</p>\n<ol>\n<li>如果任务不再来了，那么就会把空闲keepAliveTime时间的线程给移除掉</li>\n<li>如果任务接着来，并且已经达到了最大线程数，那么就要执行拒绝策略了</li>\n</ol>\n<p>其中等待队列有多种ArrayBlockingQueue，LinkedBlockingQueue，LinkedBlockingDeque，SynchronousQueue，根据具体情况而定。</p>\n<p>拒绝策略也有很多种</p>\n<ol>\n<li>AbortPolicy：丢弃任务并抛出RejectedExecutionException异常。 (默认)</li>\n<li>DiscardPolicy：也是丢弃任务，但是不抛出异常。</li>\n<li>DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li>\n<li>CallerRunsPolicy：由调用线程处理该任务</li>\n</ol>\n<ul>\n<li>四种创建线程池的方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">    \t(<span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">            \t<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">        \t\t<span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>创建一个单线程，你看名字里面都没有ThreadPool:smile:，如果这个线程死了，他会创建一个新的线程来替代。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">                <span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个线程的特点从等待队列就可以看出来，这个队列根本不存储数据，只是做一个通道，一边进一边出。最大线程数为Integer.MAX_VALUE,也就是过来一个任务我就创建一个线程，当线程数大于任务数的时候就去回收那些空闲超过60秒的线程。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">        \tnThreads, nThreads,</span><br><span class=\"line\">    \t\t<span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个线程池核心线程和最大线程数相等，也就是说，过来一个任务，就直接创建一个线程，等到了最大线程数，你看keepAliveTime为0，所以就是不管线程使用不适用都不回收，如果线程挂了的话会重新创建一个。为了不然频繁丢弃任务，这里使用了一个无界链表队列。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>(</span><br><span class=\"line\">          corePoolSize, Integer.MAX_VALUE,</span><br><span class=\"line\">          <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">    \t  <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个线程池的特点从名字就可以看出来，定期线程池，也就是任务会定期执行，这个定期是在他调用schedule方法的时候，就像一个Timer定时器一样，而他的实现主要是靠DelayedWorkQueue这个延迟队列，他规定只有到达规定延迟时间以后才能获取里面的元素</p>\n</blockquote>\n"},{"title":"自定义线程池（二）","date":"2017-12-11T07:41:08.000Z","_content":"\n上一篇已经讲过一些线程池的概念，现在我们来自定义一个线程池，实现的不是一般，就是一个个人理解的线程池实现，仅供参考。\n\n1. 创建变量\n\n```properties\n// 线程状态，空闲，运行中，阻塞，结束\nprivate enum WorkerState {FREE, RUNNABLE, BLOCKED,TERMINATED;}\n// 线程池是否被销毁\nprivate volatile boolean destroy = false;\n// 核心线程数\nprivate final static int CORE_THREAD_SIZE = 2;\n// 最大线程数\nprivate final static int MAX_THREAD_SIZE = 10;\n// 任务队列容器,也可以用Queue<Runnable> 遵循 FIFO 规则\nprivate final static LinkedList<Runnable> TASK_QUEUE = new LinkedList<>();\n// 设置它的边界值为11\nprivate final static int TASK_QUEUE_MAX_SIZE = 11;\n// 线程容器\nprivate final static List<Worker> WORKERS = new ArrayList<>();\n```\n\n> 1. WorkerState：线程状态，一个线程新创建的时候为FREE，工作的时候为RUNNABLE，处于阻塞状态的时候为BLOCK（意味着当前任务队列没有任务了），而TERMINATED表示当前线程结束\n> 2. destroy：线程池状态，表示当前线程是否已经销毁，只有执行了shutdown方法才会销毁线程池，并发情况下要保证可见性\n> 3. TASK_QUEUE_MAX_SIZE：任务阻塞队列的边界值\n\n2. 编写submit方法\n\n```java\nvoid submit(Runnable runnable) {\n    if (destroy) {\n        System.out.println(\"线程池已经销毁了，抛出异常！这里用日志代替\");\n        return;\n    }\n    synchronized (TASK_QUEUE) {\n        if (WORKERS.size() < CORE_THREAD_SIZE) {\n            System.out.println(\"核心线程数还没有满，直接创建线程\");\n            createWorkerTask();\n        } else if (TASK_QUEUE.size() < TASK_QUEUE_MAX_SIZE) {\n            System.out.println(\"核心线程数已满，但是队列没有满，把任务加到队列\");\n        } else if (WORKERS.size() < MAX_THREAD_SIZE) {\n            System.out.println(\"核心线程数,队列满了，但是没有达到最大线程数，我们接着创建线程\");\n            createWorkerTask();\n        } else if (WORKERS.size() >= MAX_THREAD_SIZE) {\n            System.out.println(\"达到了最大线程数，应该执行拒绝策略，这里我们就直接返回了\");\n            return;\n        } else {\n            System.out.println(\"情况未知\");\n        }\n        //加入任务队列\n        TASK_QUEUE.addLast(runnable);\n        // 唤醒所有线程\n        TASK_QUEUE.notifyAll();\n    }\n}\n```\n\n> 没有一个任务，我们都是通过submit交给线程池去处理的，先判断是否达到核心线程数，没有的话直接创建，如果核心线程数满了，就往队列里加，队列也满了就新建线程，如果达到最大线程数，就拒绝，这里有一点改变就是不管哪一种，我们都把人物放到任务队列中，让线程去任务队列里面取。\n\n3. 创建线程方法\n\n```java\nprivate void createWorkerTask() {\n    Worker worker = new Worker();\n    worker.workerState = WorkerState.FREE;\n    WORKERS.add(worker);\n    worker.start();\n}\n```\n\n> 线程创建之初，为空闲状态，并添加进线程集合中\n\n4. 创建线程类\n\n```java\npublic static class Worker extends Thread {\n    private WorkerState workerState;\n    // 线程编号\n    private static int threadInitNumber;\n    // 生成线程名\n    private static synchronized String nextThreadName() {\n        return \"Thread-\" + (++threadInitNumber);\n    }\n    Worker() {\n        nextThreadName();\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"开启了一个新的线程------>\" + threadInitNumber);\n        Runnable targer;\n        OUTER:\n        while (this.workerState != WorkerState.TERMINATED) {\n            synchronized (TASK_QUEUE) {\n                while (this.workerState == WorkerState.FREE && TASK_QUEUE.isEmpty()) {\n                    try {\n                        this.workerState = WorkerState.BLOCKED;\n                        TASK_QUEUE.wait();\n                    } catch (InterruptedException e) {\n                        break OUTER;\n                    }\n                }\n                targer = TASK_QUEUE.removeFirst();\n                System.out.println(\"处理任务\");\n            }\n            if (targer != null) {\n                this.workerState = WorkerState.RUNNABLE;\n                targer.run();\n                this.workerState = WorkerState.FREE;\n            }\n        }\n    }\n\n    void close() {\n        this.workerState = WorkerState.TERMINATED;\n        this.interrupt();\n    }\n\n}\n```\n\n> 为了方便观看，我们给线程指定编号，如果当前线程没有关闭的话，先去判断队列是否为空且本身的状态是空闲的话，我们就让他wait，等新来的任务再去唤醒，如果获取到了我们就处理这个任务，并把他从队列的头部拿出来\n\n5. 关闭线程池方法\n\n```java\nvoid shutdown() {\n    int size = WORKERS.size();\n    while (size > 0) {\n        for (Worker worker : WORKERS) {\n            if (worker.workerState == WorkerState.BLOCKED) {\n                worker.close();\n                size--;\n            }\n        }\n    }\n    this.destroy = true;\n    TASK_QUEUE.clear();\n    WORKERS.clear();\n    System.out.println(\"线程池已经关闭！\");\n}\n```\n\n> 等所有线程的任务都完成了以后才关闭线程，同时把线程池状态标记为销毁，并清空任务队列和线程集合。\n\n6. 使用run()来控制释放线程\n\n```java\n@Override\npublic void run() {\n    while (!destroy) {\n        try {\n            Thread.sleep(3000);\n            synchronized (WORKERS) {\n                Iterator<Worker> iterator = WORKERS.iterator();\n                while (iterator.hasNext()) {\n                    Worker worker = iterator.next();\n                    if (WORKERS.size() > CORE_THREAD_SIZE && \n                        TASK_QUEUE.size() < TASK_QUEUE_MAX_SIZE) {\n                        if (worker.workerState != WorkerState.RUNNABLE && \t\t\t\t\t\t\t\t\t\tworker.workerState != WorkerState.TERMINATED) {\n                            worker.close();\n                            iterator.remove();\n                            System.out.println(\"[回收了一个线程]\");\n                        }\n                    }\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n> 每隔3秒去遍历一下所有的线程，如果线程数大于核心线程数，且任务队列不满的话，就删除线程，知道和核心线程数一样\n\n7. 测试\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    DemoThreadPool demoThreadPool = new DemoThreadPool();\n    IntStream.range(0, 5).forEach(i ->\n            demoThreadPool.submit(() -> {\n                System.out.printf(\"[线程] - [%s] 开始工作...\\n\",   \t\t\t     \n                                  Thread.currentThread().getName());\n                try {\n                    Thread.sleep(2_000L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.printf(\"[线程] - [%s] 工作完毕...\\n\", \n                                  Thread.currentThread().getName());\n            })\n    );\n\n    Thread.sleep(3000);\n\n    IntStream.range(0, 30).forEach(i ->\n            demoThreadPool.submit(() -> {\n                System.out.printf(\"[线程] - [%s] 开始工作...\\n\", \n                                  Thread.currentThread().getName());\n                try {\n                    Thread.sleep(2_000L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.printf(\"[线程] - [%s] 工作完毕...\\n\", \n                                  Thread.currentThread().getName());\n            })\n    );\n//        demoThreadPool.shutdown();\n}\n```\n\n> 为了观察状态，我们先一下子创建5个任务，这个时候他会先创建2个线程，然后把3个放到队列里，因为没有满，所以这两个线程就可以应付，但是当一下30个的时候，会发生拒绝，然后过了峰值以后，多余的线程就会销毁。\n\n实现的可能不好，但是我理解的就是这样，源码在[https://github.com/colin-xun/threadpool上，欢迎给我点:star](https://github.com/colin-xun/threadpool%E4%B8%8A%EF%BC%8C%E6%AC%A2%E8%BF%8E%E7%BB%99%E6%88%91%E7%82%B9:star):","source":"_posts/自定义线程池（二）.md","raw":"---\ntitle: 自定义线程池（二）\ndate: 2017-12-11 15:41:08\ntags: [java,多线程,线程池]\ncategory: java高级\n---\n\n上一篇已经讲过一些线程池的概念，现在我们来自定义一个线程池，实现的不是一般，就是一个个人理解的线程池实现，仅供参考。\n\n1. 创建变量\n\n```properties\n// 线程状态，空闲，运行中，阻塞，结束\nprivate enum WorkerState {FREE, RUNNABLE, BLOCKED,TERMINATED;}\n// 线程池是否被销毁\nprivate volatile boolean destroy = false;\n// 核心线程数\nprivate final static int CORE_THREAD_SIZE = 2;\n// 最大线程数\nprivate final static int MAX_THREAD_SIZE = 10;\n// 任务队列容器,也可以用Queue<Runnable> 遵循 FIFO 规则\nprivate final static LinkedList<Runnable> TASK_QUEUE = new LinkedList<>();\n// 设置它的边界值为11\nprivate final static int TASK_QUEUE_MAX_SIZE = 11;\n// 线程容器\nprivate final static List<Worker> WORKERS = new ArrayList<>();\n```\n\n> 1. WorkerState：线程状态，一个线程新创建的时候为FREE，工作的时候为RUNNABLE，处于阻塞状态的时候为BLOCK（意味着当前任务队列没有任务了），而TERMINATED表示当前线程结束\n> 2. destroy：线程池状态，表示当前线程是否已经销毁，只有执行了shutdown方法才会销毁线程池，并发情况下要保证可见性\n> 3. TASK_QUEUE_MAX_SIZE：任务阻塞队列的边界值\n\n2. 编写submit方法\n\n```java\nvoid submit(Runnable runnable) {\n    if (destroy) {\n        System.out.println(\"线程池已经销毁了，抛出异常！这里用日志代替\");\n        return;\n    }\n    synchronized (TASK_QUEUE) {\n        if (WORKERS.size() < CORE_THREAD_SIZE) {\n            System.out.println(\"核心线程数还没有满，直接创建线程\");\n            createWorkerTask();\n        } else if (TASK_QUEUE.size() < TASK_QUEUE_MAX_SIZE) {\n            System.out.println(\"核心线程数已满，但是队列没有满，把任务加到队列\");\n        } else if (WORKERS.size() < MAX_THREAD_SIZE) {\n            System.out.println(\"核心线程数,队列满了，但是没有达到最大线程数，我们接着创建线程\");\n            createWorkerTask();\n        } else if (WORKERS.size() >= MAX_THREAD_SIZE) {\n            System.out.println(\"达到了最大线程数，应该执行拒绝策略，这里我们就直接返回了\");\n            return;\n        } else {\n            System.out.println(\"情况未知\");\n        }\n        //加入任务队列\n        TASK_QUEUE.addLast(runnable);\n        // 唤醒所有线程\n        TASK_QUEUE.notifyAll();\n    }\n}\n```\n\n> 没有一个任务，我们都是通过submit交给线程池去处理的，先判断是否达到核心线程数，没有的话直接创建，如果核心线程数满了，就往队列里加，队列也满了就新建线程，如果达到最大线程数，就拒绝，这里有一点改变就是不管哪一种，我们都把人物放到任务队列中，让线程去任务队列里面取。\n\n3. 创建线程方法\n\n```java\nprivate void createWorkerTask() {\n    Worker worker = new Worker();\n    worker.workerState = WorkerState.FREE;\n    WORKERS.add(worker);\n    worker.start();\n}\n```\n\n> 线程创建之初，为空闲状态，并添加进线程集合中\n\n4. 创建线程类\n\n```java\npublic static class Worker extends Thread {\n    private WorkerState workerState;\n    // 线程编号\n    private static int threadInitNumber;\n    // 生成线程名\n    private static synchronized String nextThreadName() {\n        return \"Thread-\" + (++threadInitNumber);\n    }\n    Worker() {\n        nextThreadName();\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"开启了一个新的线程------>\" + threadInitNumber);\n        Runnable targer;\n        OUTER:\n        while (this.workerState != WorkerState.TERMINATED) {\n            synchronized (TASK_QUEUE) {\n                while (this.workerState == WorkerState.FREE && TASK_QUEUE.isEmpty()) {\n                    try {\n                        this.workerState = WorkerState.BLOCKED;\n                        TASK_QUEUE.wait();\n                    } catch (InterruptedException e) {\n                        break OUTER;\n                    }\n                }\n                targer = TASK_QUEUE.removeFirst();\n                System.out.println(\"处理任务\");\n            }\n            if (targer != null) {\n                this.workerState = WorkerState.RUNNABLE;\n                targer.run();\n                this.workerState = WorkerState.FREE;\n            }\n        }\n    }\n\n    void close() {\n        this.workerState = WorkerState.TERMINATED;\n        this.interrupt();\n    }\n\n}\n```\n\n> 为了方便观看，我们给线程指定编号，如果当前线程没有关闭的话，先去判断队列是否为空且本身的状态是空闲的话，我们就让他wait，等新来的任务再去唤醒，如果获取到了我们就处理这个任务，并把他从队列的头部拿出来\n\n5. 关闭线程池方法\n\n```java\nvoid shutdown() {\n    int size = WORKERS.size();\n    while (size > 0) {\n        for (Worker worker : WORKERS) {\n            if (worker.workerState == WorkerState.BLOCKED) {\n                worker.close();\n                size--;\n            }\n        }\n    }\n    this.destroy = true;\n    TASK_QUEUE.clear();\n    WORKERS.clear();\n    System.out.println(\"线程池已经关闭！\");\n}\n```\n\n> 等所有线程的任务都完成了以后才关闭线程，同时把线程池状态标记为销毁，并清空任务队列和线程集合。\n\n6. 使用run()来控制释放线程\n\n```java\n@Override\npublic void run() {\n    while (!destroy) {\n        try {\n            Thread.sleep(3000);\n            synchronized (WORKERS) {\n                Iterator<Worker> iterator = WORKERS.iterator();\n                while (iterator.hasNext()) {\n                    Worker worker = iterator.next();\n                    if (WORKERS.size() > CORE_THREAD_SIZE && \n                        TASK_QUEUE.size() < TASK_QUEUE_MAX_SIZE) {\n                        if (worker.workerState != WorkerState.RUNNABLE && \t\t\t\t\t\t\t\t\t\tworker.workerState != WorkerState.TERMINATED) {\n                            worker.close();\n                            iterator.remove();\n                            System.out.println(\"[回收了一个线程]\");\n                        }\n                    }\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n> 每隔3秒去遍历一下所有的线程，如果线程数大于核心线程数，且任务队列不满的话，就删除线程，知道和核心线程数一样\n\n7. 测试\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    DemoThreadPool demoThreadPool = new DemoThreadPool();\n    IntStream.range(0, 5).forEach(i ->\n            demoThreadPool.submit(() -> {\n                System.out.printf(\"[线程] - [%s] 开始工作...\\n\",   \t\t\t     \n                                  Thread.currentThread().getName());\n                try {\n                    Thread.sleep(2_000L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.printf(\"[线程] - [%s] 工作完毕...\\n\", \n                                  Thread.currentThread().getName());\n            })\n    );\n\n    Thread.sleep(3000);\n\n    IntStream.range(0, 30).forEach(i ->\n            demoThreadPool.submit(() -> {\n                System.out.printf(\"[线程] - [%s] 开始工作...\\n\", \n                                  Thread.currentThread().getName());\n                try {\n                    Thread.sleep(2_000L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.printf(\"[线程] - [%s] 工作完毕...\\n\", \n                                  Thread.currentThread().getName());\n            })\n    );\n//        demoThreadPool.shutdown();\n}\n```\n\n> 为了观察状态，我们先一下子创建5个任务，这个时候他会先创建2个线程，然后把3个放到队列里，因为没有满，所以这两个线程就可以应付，但是当一下30个的时候，会发生拒绝，然后过了峰值以后，多余的线程就会销毁。\n\n实现的可能不好，但是我理解的就是这样，源码在[https://github.com/colin-xun/threadpool上，欢迎给我点:star](https://github.com/colin-xun/threadpool%E4%B8%8A%EF%BC%8C%E6%AC%A2%E8%BF%8E%E7%BB%99%E6%88%91%E7%82%B9:star):","slug":"自定义线程池（二）","published":1,"updated":"2018-09-13T08:15:24.566Z","_id":"cjm0akt37000i3gvw1j5vrfvs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>上一篇已经讲过一些线程池的概念，现在我们来自定义一个线程池，实现的不是一般，就是一个个人理解的线程池实现，仅供参考。</p>\n<ol>\n<li>创建变量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 线程状态，空闲，运行中，阻塞，结束</span><br><span class=\"line\">private enum WorkerState &#123;FREE, RUNNABLE, BLOCKED,TERMINATED;&#125;</span><br><span class=\"line\">// 线程池是否被销毁</span><br><span class=\"line\">private volatile boolean destroy = false;</span><br><span class=\"line\">// 核心线程数</span><br><span class=\"line\">private final static int CORE_THREAD_SIZE = 2;</span><br><span class=\"line\">// 最大线程数</span><br><span class=\"line\">private final static int MAX_THREAD_SIZE = 10;</span><br><span class=\"line\">// 任务队列容器,也可以用Queue&lt;Runnable&gt; 遵循 FIFO 规则</span><br><span class=\"line\">private final static LinkedList&lt;Runnable&gt; TASK_QUEUE = new LinkedList&lt;&gt;();</span><br><span class=\"line\">// 设置它的边界值为11</span><br><span class=\"line\">private final static int TASK_QUEUE_MAX_SIZE = 11;</span><br><span class=\"line\">// 线程容器</span><br><span class=\"line\">private final static List&lt;Worker&gt; WORKERS = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>WorkerState：线程状态，一个线程新创建的时候为FREE，工作的时候为RUNNABLE，处于阻塞状态的时候为BLOCK（意味着当前任务队列没有任务了），而TERMINATED表示当前线程结束</li>\n<li>destroy：线程池状态，表示当前线程是否已经销毁，只有执行了shutdown方法才会销毁线程池，并发情况下要保证可见性</li>\n<li>TASK_QUEUE_MAX_SIZE：任务阻塞队列的边界值</li>\n</ol>\n</blockquote>\n<ol>\n<li>编写submit方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (destroy) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"线程池已经销毁了，抛出异常！这里用日志代替\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (TASK_QUEUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (WORKERS.size() &lt; CORE_THREAD_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"核心线程数还没有满，直接创建线程\"</span>);</span><br><span class=\"line\">            createWorkerTask();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TASK_QUEUE.size() &lt; TASK_QUEUE_MAX_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"核心线程数已满，但是队列没有满，把任务加到队列\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WORKERS.size() &lt; MAX_THREAD_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"核心线程数,队列满了，但是没有达到最大线程数，我们接着创建线程\"</span>);</span><br><span class=\"line\">            createWorkerTask();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WORKERS.size() &gt;= MAX_THREAD_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"达到了最大线程数，应该执行拒绝策略，这里我们就直接返回了\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"情况未知\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//加入任务队列</span></span><br><span class=\"line\">        TASK_QUEUE.addLast(runnable);</span><br><span class=\"line\">        <span class=\"comment\">// 唤醒所有线程</span></span><br><span class=\"line\">        TASK_QUEUE.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>没有一个任务，我们都是通过submit交给线程池去处理的，先判断是否达到核心线程数，没有的话直接创建，如果核心线程数满了，就往队列里加，队列也满了就新建线程，如果达到最大线程数，就拒绝，这里有一点改变就是不管哪一种，我们都把人物放到任务队列中，让线程去任务队列里面取。</p>\n</blockquote>\n<ol>\n<li>创建线程方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createWorkerTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Worker worker = <span class=\"keyword\">new</span> Worker();</span><br><span class=\"line\">    worker.workerState = WorkerState.FREE;</span><br><span class=\"line\">    WORKERS.add(worker);</span><br><span class=\"line\">    worker.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>线程创建之初，为空闲状态，并添加进线程集合中</p>\n</blockquote>\n<ol>\n<li>创建线程类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WorkerState workerState;</span><br><span class=\"line\">    <span class=\"comment\">// 线程编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> threadInitNumber;</span><br><span class=\"line\">    <span class=\"comment\">// 生成线程名</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> String <span class=\"title\">nextThreadName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Thread-\"</span> + (++threadInitNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Worker() &#123;</span><br><span class=\"line\">        nextThreadName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开启了一个新的线程------&gt;\"</span> + threadInitNumber);</span><br><span class=\"line\">        Runnable targer;</span><br><span class=\"line\">        OUTER:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.workerState != WorkerState.TERMINATED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (TASK_QUEUE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.workerState == WorkerState.FREE &amp;&amp; TASK_QUEUE.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.workerState = WorkerState.BLOCKED;</span><br><span class=\"line\">                        TASK_QUEUE.wait();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span> OUTER;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                targer = TASK_QUEUE.removeFirst();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"处理任务\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.workerState = WorkerState.RUNNABLE;</span><br><span class=\"line\">                targer.run();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.workerState = WorkerState.FREE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.workerState = WorkerState.TERMINATED;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了方便观看，我们给线程指定编号，如果当前线程没有关闭的话，先去判断队列是否为空且本身的状态是空闲的话，我们就让他wait，等新来的任务再去唤醒，如果获取到了我们就处理这个任务，并把他从队列的头部拿出来</p>\n</blockquote>\n<ol>\n<li>关闭线程池方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = WORKERS.size();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Worker worker : WORKERS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (worker.workerState == WorkerState.BLOCKED) &#123;</span><br><span class=\"line\">                worker.close();</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.destroy = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    TASK_QUEUE.clear();</span><br><span class=\"line\">    WORKERS.clear();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"线程池已经关闭！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>等所有线程的任务都完成了以后才关闭线程，同时把线程池状态标记为销毁，并清空任务队列和线程集合。</p>\n</blockquote>\n<ol>\n<li>使用run()来控制释放线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!destroy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (WORKERS) &#123;</span><br><span class=\"line\">                Iterator&lt;Worker&gt; iterator = WORKERS.iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                    Worker worker = iterator.next();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (WORKERS.size() &gt; CORE_THREAD_SIZE &amp;&amp; </span><br><span class=\"line\">                        TASK_QUEUE.size() &lt; TASK_QUEUE_MAX_SIZE) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (worker.workerState != WorkerState.RUNNABLE &amp;&amp; \t\t\t\t\t\t\t\t\t\tworker.workerState != WorkerState.TERMINATED) &#123;</span><br><span class=\"line\">                            worker.close();</span><br><span class=\"line\">                            iterator.remove();</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"[回收了一个线程]\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每隔3秒去遍历一下所有的线程，如果线程数大于核心线程数，且任务队列不满的话，就删除线程，知道和核心线程数一样</p>\n</blockquote>\n<ol>\n<li>测试</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    DemoThreadPool demoThreadPool = <span class=\"keyword\">new</span> DemoThreadPool();</span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">5</span>).forEach(i -&gt;</span><br><span class=\"line\">            demoThreadPool.submit(() -&gt; &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 开始工作...\\n\"</span>,   \t\t\t     </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2_000L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 工作完毕...\\n\"</span>, </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">30</span>).forEach(i -&gt;</span><br><span class=\"line\">            demoThreadPool.submit(() -&gt; &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 开始工作...\\n\"</span>, </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2_000L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 工作完毕...\\n\"</span>, </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"><span class=\"comment\">//        demoThreadPool.shutdown();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了观察状态，我们先一下子创建5个任务，这个时候他会先创建2个线程，然后把3个放到队列里，因为没有满，所以这两个线程就可以应付，但是当一下30个的时候，会发生拒绝，然后过了峰值以后，多余的线程就会销毁。</p>\n</blockquote>\n<p>实现的可能不好，但是我理解的就是这样，源码在<a href=\"https://github.com/colin-xun/threadpool%E4%B8%8A%EF%BC%8C%E6%AC%A2%E8%BF%8E%E7%BB%99%E6%88%91%E7%82%B9:star\" target=\"_blank\" rel=\"noopener\">https://github.com/colin-xun/threadpool上，欢迎给我点:star</a>:</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇已经讲过一些线程池的概念，现在我们来自定义一个线程池，实现的不是一般，就是一个个人理解的线程池实现，仅供参考。</p>\n<ol>\n<li>创建变量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 线程状态，空闲，运行中，阻塞，结束</span><br><span class=\"line\">private enum WorkerState &#123;FREE, RUNNABLE, BLOCKED,TERMINATED;&#125;</span><br><span class=\"line\">// 线程池是否被销毁</span><br><span class=\"line\">private volatile boolean destroy = false;</span><br><span class=\"line\">// 核心线程数</span><br><span class=\"line\">private final static int CORE_THREAD_SIZE = 2;</span><br><span class=\"line\">// 最大线程数</span><br><span class=\"line\">private final static int MAX_THREAD_SIZE = 10;</span><br><span class=\"line\">// 任务队列容器,也可以用Queue&lt;Runnable&gt; 遵循 FIFO 规则</span><br><span class=\"line\">private final static LinkedList&lt;Runnable&gt; TASK_QUEUE = new LinkedList&lt;&gt;();</span><br><span class=\"line\">// 设置它的边界值为11</span><br><span class=\"line\">private final static int TASK_QUEUE_MAX_SIZE = 11;</span><br><span class=\"line\">// 线程容器</span><br><span class=\"line\">private final static List&lt;Worker&gt; WORKERS = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>WorkerState：线程状态，一个线程新创建的时候为FREE，工作的时候为RUNNABLE，处于阻塞状态的时候为BLOCK（意味着当前任务队列没有任务了），而TERMINATED表示当前线程结束</li>\n<li>destroy：线程池状态，表示当前线程是否已经销毁，只有执行了shutdown方法才会销毁线程池，并发情况下要保证可见性</li>\n<li>TASK_QUEUE_MAX_SIZE：任务阻塞队列的边界值</li>\n</ol>\n</blockquote>\n<ol>\n<li>编写submit方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (destroy) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"线程池已经销毁了，抛出异常！这里用日志代替\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (TASK_QUEUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (WORKERS.size() &lt; CORE_THREAD_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"核心线程数还没有满，直接创建线程\"</span>);</span><br><span class=\"line\">            createWorkerTask();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TASK_QUEUE.size() &lt; TASK_QUEUE_MAX_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"核心线程数已满，但是队列没有满，把任务加到队列\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WORKERS.size() &lt; MAX_THREAD_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"核心线程数,队列满了，但是没有达到最大线程数，我们接着创建线程\"</span>);</span><br><span class=\"line\">            createWorkerTask();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WORKERS.size() &gt;= MAX_THREAD_SIZE) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"达到了最大线程数，应该执行拒绝策略，这里我们就直接返回了\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"情况未知\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//加入任务队列</span></span><br><span class=\"line\">        TASK_QUEUE.addLast(runnable);</span><br><span class=\"line\">        <span class=\"comment\">// 唤醒所有线程</span></span><br><span class=\"line\">        TASK_QUEUE.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>没有一个任务，我们都是通过submit交给线程池去处理的，先判断是否达到核心线程数，没有的话直接创建，如果核心线程数满了，就往队列里加，队列也满了就新建线程，如果达到最大线程数，就拒绝，这里有一点改变就是不管哪一种，我们都把人物放到任务队列中，让线程去任务队列里面取。</p>\n</blockquote>\n<ol>\n<li>创建线程方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createWorkerTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Worker worker = <span class=\"keyword\">new</span> Worker();</span><br><span class=\"line\">    worker.workerState = WorkerState.FREE;</span><br><span class=\"line\">    WORKERS.add(worker);</span><br><span class=\"line\">    worker.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>线程创建之初，为空闲状态，并添加进线程集合中</p>\n</blockquote>\n<ol>\n<li>创建线程类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WorkerState workerState;</span><br><span class=\"line\">    <span class=\"comment\">// 线程编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> threadInitNumber;</span><br><span class=\"line\">    <span class=\"comment\">// 生成线程名</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> String <span class=\"title\">nextThreadName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Thread-\"</span> + (++threadInitNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Worker() &#123;</span><br><span class=\"line\">        nextThreadName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开启了一个新的线程------&gt;\"</span> + threadInitNumber);</span><br><span class=\"line\">        Runnable targer;</span><br><span class=\"line\">        OUTER:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.workerState != WorkerState.TERMINATED) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (TASK_QUEUE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.workerState == WorkerState.FREE &amp;&amp; TASK_QUEUE.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">this</span>.workerState = WorkerState.BLOCKED;</span><br><span class=\"line\">                        TASK_QUEUE.wait();</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span> OUTER;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                targer = TASK_QUEUE.removeFirst();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"处理任务\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.workerState = WorkerState.RUNNABLE;</span><br><span class=\"line\">                targer.run();</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.workerState = WorkerState.FREE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.workerState = WorkerState.TERMINATED;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了方便观看，我们给线程指定编号，如果当前线程没有关闭的话，先去判断队列是否为空且本身的状态是空闲的话，我们就让他wait，等新来的任务再去唤醒，如果获取到了我们就处理这个任务，并把他从队列的头部拿出来</p>\n</blockquote>\n<ol>\n<li>关闭线程池方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = WORKERS.size();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (size &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Worker worker : WORKERS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (worker.workerState == WorkerState.BLOCKED) &#123;</span><br><span class=\"line\">                worker.close();</span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.destroy = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    TASK_QUEUE.clear();</span><br><span class=\"line\">    WORKERS.clear();</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"线程池已经关闭！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>等所有线程的任务都完成了以后才关闭线程，同时把线程池状态标记为销毁，并清空任务队列和线程集合。</p>\n</blockquote>\n<ol>\n<li>使用run()来控制释放线程</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!destroy) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (WORKERS) &#123;</span><br><span class=\"line\">                Iterator&lt;Worker&gt; iterator = WORKERS.iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                    Worker worker = iterator.next();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (WORKERS.size() &gt; CORE_THREAD_SIZE &amp;&amp; </span><br><span class=\"line\">                        TASK_QUEUE.size() &lt; TASK_QUEUE_MAX_SIZE) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (worker.workerState != WorkerState.RUNNABLE &amp;&amp; \t\t\t\t\t\t\t\t\t\tworker.workerState != WorkerState.TERMINATED) &#123;</span><br><span class=\"line\">                            worker.close();</span><br><span class=\"line\">                            iterator.remove();</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">\"[回收了一个线程]\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每隔3秒去遍历一下所有的线程，如果线程数大于核心线程数，且任务队列不满的话，就删除线程，知道和核心线程数一样</p>\n</blockquote>\n<ol>\n<li>测试</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">    DemoThreadPool demoThreadPool = <span class=\"keyword\">new</span> DemoThreadPool();</span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">5</span>).forEach(i -&gt;</span><br><span class=\"line\">            demoThreadPool.submit(() -&gt; &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 开始工作...\\n\"</span>,   \t\t\t     </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2_000L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 工作完毕...\\n\"</span>, </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    IntStream.range(<span class=\"number\">0</span>, <span class=\"number\">30</span>).forEach(i -&gt;</span><br><span class=\"line\">            demoThreadPool.submit(() -&gt; &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 开始工作...\\n\"</span>, </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2_000L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"[线程] - [%s] 工作完毕...\\n\"</span>, </span><br><span class=\"line\">                                  Thread.currentThread().getName());</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\"><span class=\"comment\">//        demoThreadPool.shutdown();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了观察状态，我们先一下子创建5个任务，这个时候他会先创建2个线程，然后把3个放到队列里，因为没有满，所以这两个线程就可以应付，但是当一下30个的时候，会发生拒绝，然后过了峰值以后，多余的线程就会销毁。</p>\n</blockquote>\n<p>实现的可能不好，但是我理解的就是这样，源码在<a href=\"https://github.com/colin-xun/threadpool%E4%B8%8A%EF%BC%8C%E6%AC%A2%E8%BF%8E%E7%BB%99%E6%88%91%E7%82%B9:star\" target=\"_blank\" rel=\"noopener\">https://github.com/colin-xun/threadpool上，欢迎给我点:star</a>:</p>\n"}],"PostAsset":[{"_id":"source/_posts/Paxos算法/1.png","slug":"1.png","post":"cjm0akt2l00003gvwxk4fzf9q","modified":0,"renderable":0},{"_id":"source/_posts/Paxos算法/2.png","slug":"2.png","post":"cjm0akt2l00003gvwxk4fzf9q","modified":0,"renderable":0},{"_id":"source/_posts/String之intern函数/1.png","slug":"1.png","post":"cjm0akt2p00013gvw2nkrxwfk","modified":0,"renderable":0},{"_id":"source/_posts/String之intern函数/2.png","slug":"2.png","post":"cjm0akt2p00013gvw2nkrxwfk","modified":0,"renderable":0},{"_id":"source/_posts/String之intern函数/3.png","slug":"3.png","post":"cjm0akt2p00013gvw2nkrxwfk","modified":0,"renderable":0},{"_id":"source/_posts/java值传递和引用传递/1.png","slug":"1.png","post":"cjm0akt2x00053gvwg7lxhmnk","modified":0,"renderable":0},{"_id":"source/_posts/数据库索引之BTree/1.png","slug":"1.png","post":"cjm0akt31000a3gvwjvcjhaba","modified":0,"renderable":0},{"_id":"source/_posts/数据库索引之BTree/2.png","slug":"2.png","post":"cjm0akt31000a3gvwjvcjhaba","modified":0,"renderable":0},{"_id":"source/_posts/数据库索引之BTree/3.png","slug":"3.png","post":"cjm0akt31000a3gvwjvcjhaba","modified":0,"renderable":0},{"_id":"source/_posts/拜占庭容错算法（PBFT）/1.jpg","slug":"1.jpg","post":"cjm0akt3000093gvwo0zti81v","modified":0,"renderable":0},{"_id":"source/_posts/自定义线程池（一）/1.png","slug":"1.png","post":"cjm0akt35000e3gvw7ur7oel6","modified":0,"renderable":0},{"_id":"source/_posts/拜占庭容错算法（PBFT）/2.png","slug":"2.png","post":"cjm0akt3000093gvwo0zti81v","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjm0akt2p00013gvw2nkrxwfk","category_id":"cjm0akt2z00073gvwv7q8cx97","_id":"cjm0akt36000g3gvwgyifgp0p"},{"post_id":"cjm0akt2t00043gvwade9wi1m","category_id":"cjm0akt2z00073gvwv7q8cx97","_id":"cjm0akt3a000l3gvwkxsypyxk"},{"post_id":"cjm0akt2x00053gvwg7lxhmnk","category_id":"cjm0akt2z00073gvwv7q8cx97","_id":"cjm0akt3b000p3gvwf0pp18fx"},{"post_id":"cjm0akt2l00003gvwxk4fzf9q","category_id":"cjm0akt2r00023gvwfbmqfh4g","_id":"cjm0akt3c000s3gvwvexzn7i2"},{"post_id":"cjm0akt2l00003gvwxk4fzf9q","category_id":"cjm0akt3a000k3gvwt35dmz37","_id":"cjm0akt3d000v3gvwe5opusm0"},{"post_id":"cjm0akt31000a3gvwjvcjhaba","category_id":"cjm0akt3c000q3gvwd4i054ql","_id":"cjm0akt3e000x3gvwg681m6oq"},{"post_id":"cjm0akt34000d3gvw7m0yq11a","category_id":"cjm0akt3c000t3gvw5owmldvw","_id":"cjm0akt3f00113gvw2busb27n"},{"post_id":"cjm0akt2y00063gvwsup8d35i","category_id":"cjm0akt2r00023gvwfbmqfh4g","_id":"cjm0b4abi000224vwle86wsa7"},{"post_id":"cjm0akt3000093gvwo0zti81v","category_id":"cjm0b4abh000124vwc4njdgc6","_id":"cjm0b4abw000724vw3meqvn62"},{"post_id":"cjm0akt35000e3gvw7ur7oel6","category_id":"cjm0b4agm000b24vw8gyq2or5","_id":"cjm0b4agu000g24vwt4tu1cla"},{"post_id":"cjm0akt37000i3gvw1j5vrfvs","category_id":"cjm0b4agm000b24vw8gyq2or5","_id":"cjm0b4agv000j24vwylnjdqol"}],"PostTag":[{"post_id":"cjm0akt2l00003gvwxk4fzf9q","tag_id":"cjm0akt2t00033gvwpbdfd9cy","_id":"cjm0akt39000j3gvwpzlllubc"},{"post_id":"cjm0akt2l00003gvwxk4fzf9q","tag_id":"cjm0akt2z00083gvwvuv3az65","_id":"cjm0akt3b000m3gvw8qat7eri"},{"post_id":"cjm0akt2l00003gvwxk4fzf9q","tag_id":"cjm0akt32000c3gvwgrmch96p","_id":"cjm0akt3b000o3gvwkxebs69i"},{"post_id":"cjm0akt2p00013gvw2nkrxwfk","tag_id":"cjm0akt37000h3gvw4zpc9l2t","_id":"cjm0akt3d000w3gvwea4h820i"},{"post_id":"cjm0akt2p00013gvw2nkrxwfk","tag_id":"cjm0akt3b000n3gvw6r0x6c1z","_id":"cjm0akt3e000y3gvw3g2gfoua"},{"post_id":"cjm0akt2p00013gvw2nkrxwfk","tag_id":"cjm0akt3c000r3gvwicovwn74","_id":"cjm0akt3f00103gvwyrkyoere"},{"post_id":"cjm0akt2t00043gvwade9wi1m","tag_id":"cjm0akt37000h3gvw4zpc9l2t","_id":"cjm0akt3f00133gvwjej8k1i6"},{"post_id":"cjm0akt2t00043gvwade9wi1m","tag_id":"cjm0akt3c000r3gvwicovwn74","_id":"cjm0akt3g00143gvw7nuae9th"},{"post_id":"cjm0akt2x00053gvwg7lxhmnk","tag_id":"cjm0akt37000h3gvw4zpc9l2t","_id":"cjm0akt3h00183gvwz8kcxphf"},{"post_id":"cjm0akt2x00053gvwg7lxhmnk","tag_id":"cjm0akt3b000n3gvw6r0x6c1z","_id":"cjm0akt3h00193gvwrgbdjgke"},{"post_id":"cjm0akt2x00053gvwg7lxhmnk","tag_id":"cjm0akt3c000r3gvwicovwn74","_id":"cjm0akt3i001b3gvwj66mz6rv"},{"post_id":"cjm0akt31000a3gvwjvcjhaba","tag_id":"cjm0akt3h00173gvw1u55v9h1","_id":"cjm0akt3j001e3gvw3aggvbf8"},{"post_id":"cjm0akt31000a3gvwjvcjhaba","tag_id":"cjm0akt3h001a3gvwrkld0ijx","_id":"cjm0akt3j001f3gvwh1mhukel"},{"post_id":"cjm0akt31000a3gvwjvcjhaba","tag_id":"cjm0akt3i001c3gvwfws3kntf","_id":"cjm0akt3j001h3gvwsbgtackp"},{"post_id":"cjm0akt34000d3gvw7m0yq11a","tag_id":"cjm0akt3i001d3gvwuo8gy2ae","_id":"cjm0akt3k001j3gvwh79a3vq1"},{"post_id":"cjm0akt34000d3gvw7m0yq11a","tag_id":"cjm0akt3j001g3gvwt7ealc12","_id":"cjm0akt3k001k3gvw3waxcf82"},{"post_id":"cjm0akt34000d3gvw7m0yq11a","tag_id":"cjm0akt3j001i3gvw4ne01zev","_id":"cjm0akt3k001l3gvwvg80t6u8"},{"post_id":"cjm0akt2y00063gvwsup8d35i","tag_id":"cjm0akt2t00033gvwpbdfd9cy","_id":"cjm0b4abp000424vw2ee5gomp"},{"post_id":"cjm0akt2y00063gvwsup8d35i","tag_id":"cjm0akt2z00083gvwvuv3az65","_id":"cjm0b4abs000524vwu3t0fuz2"},{"post_id":"cjm0akt2y00063gvwsup8d35i","tag_id":"cjm0b4abe000024vwzvepgvhb","_id":"cjm0b4abv000624vw95s48fn7"},{"post_id":"cjm0akt3000093gvwo0zti81v","tag_id":"cjm0akt2t00033gvwpbdfd9cy","_id":"cjm0b4abx000824vwwo8pf2pp"},{"post_id":"cjm0akt3000093gvwo0zti81v","tag_id":"cjm0akt32000c3gvwgrmch96p","_id":"cjm0b4aby000924vw7kh6mwwn"},{"post_id":"cjm0akt3000093gvwo0zti81v","tag_id":"cjm0b4abn000324vwek71qimr","_id":"cjm0b4ac0000a24vwhlbbouwe"},{"post_id":"cjm0akt35000e3gvw7ur7oel6","tag_id":"cjm0akt37000h3gvw4zpc9l2t","_id":"cjm0b4agv000i24vw2uiusuxz"},{"post_id":"cjm0akt35000e3gvw7ur7oel6","tag_id":"cjm0b4agn000c24vwm5ci829d","_id":"cjm0b4agv000k24vwwwz6u1d1"},{"post_id":"cjm0akt35000e3gvw7ur7oel6","tag_id":"cjm0b4ags000f24vwfqbpj7xr","_id":"cjm0b4agw000m24vw0avmycrl"},{"post_id":"cjm0akt37000i3gvw1j5vrfvs","tag_id":"cjm0akt37000h3gvw4zpc9l2t","_id":"cjm0b4agx000n24vwnusjbc18"},{"post_id":"cjm0akt37000i3gvw1j5vrfvs","tag_id":"cjm0b4agn000c24vwm5ci829d","_id":"cjm0b4agx000o24vwuw2qt1w7"},{"post_id":"cjm0akt37000i3gvw1j5vrfvs","tag_id":"cjm0b4ags000f24vwfqbpj7xr","_id":"cjm0b4agx000p24vwp384mpi2"}],"Tag":[{"name":"一致性","_id":"cjm0akt2t00033gvwpbdfd9cy"},{"name":"分布式","_id":"cjm0akt2z00083gvwvuv3az65"},{"name":"算法","_id":"cjm0akt32000c3gvwgrmch96p"},{"name":"java","_id":"cjm0akt37000h3gvw4zpc9l2t"},{"name":"面试","_id":"cjm0akt3b000n3gvw6r0x6c1z"},{"name":"基础","_id":"cjm0akt3c000r3gvwicovwn74"},{"name":"数据库","_id":"cjm0akt3h00173gvw1u55v9h1"},{"name":"底层原理","_id":"cjm0akt3h001a3gvwrkld0ijx"},{"name":"数据结构","_id":"cjm0akt3i001c3gvwfws3kntf"},{"name":"树莓派","_id":"cjm0akt3i001d3gvwuo8gy2ae"},{"name":"温湿度传感器","_id":"cjm0akt3j001g3gvwt7ealc12"},{"name":"毕业设计","_id":"cjm0akt3j001i3gvw4ne01zev"},{"name":"session共享","_id":"cjm0b4abe000024vwzvepgvhb"},{"name":"区块链","_id":"cjm0b4abn000324vwek71qimr"},{"name":"多线程","_id":"cjm0b4agn000c24vwm5ci829d"},{"name":"线程池","_id":"cjm0b4ags000f24vwfqbpj7xr"}]}}